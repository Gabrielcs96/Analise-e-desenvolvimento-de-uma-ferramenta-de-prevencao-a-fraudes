{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Gabrielcs96/Analise-e-desenvolvimento-de-uma-ferramenta-de-prevencao-a-fraudes/blob/main/An%C3%A1lise%20de%20dados%20e%20cria%C3%A7%C3%A3o%20de%20uma%20ferramenta%20de%20Antifraude%20com%20Scoragem%20%20%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install lightgbm # Instalando o LGBM - carro chefe da anÃ¡lise"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ddm8ZiQyoPSB",
        "outputId": "b688ab87-cd89-4f74-eb22-ec7b06729b7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (3.3.5)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.10/dist-packages (from lightgbm) (0.40.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.22.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.10.1)\n",
            "Requirement already satisfied: scikit-learn!=0.22.0 in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn!=0.22.0->lightgbm) (1.3.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn!=0.22.0->lightgbm) (3.2.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u1pAvrQecIoi"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from sklearn.tree import DecisionTreeClassifier,plot_tree\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report\n",
        "import lightgbm as lgb\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from google.colab import drive"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.style.use('seaborn')"
      ],
      "metadata": {
        "id": "TYPC3punoi0R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4c867873-12a7-43d9-9c1e-eb4c0424d723"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-4-4a43041a1d49>:1: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
            "  plt.style.use('seaborn')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "drive.mount('/content/mount')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I4Tb3sSaahM8",
        "outputId": "be52d0f0-4bd9-4bea-955b-3f243efbb5a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/mount\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Carregando a base"
      ],
      "metadata": {
        "id": "K7GHnAV2pwim"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\n",
        "    '/content/mount/MyDrive/Colab Notebooks/TESTE CLOUDWALK/DADOS/transactional-sample.csv'\n",
        "    ,sep=','\n",
        "    )"
      ],
      "metadata": {
        "id": "tCvC9qg5pvSm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "i0ZgvrPlsO_4",
        "outputId": "2bb0daec-0be8-48a7-8952-5174ff0e9f19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   merchant_id  user_id       card_number            transaction_date  \\\n",
              "0        29744    97051  434505******9116  2019-12-01T23:16:32.812632   \n",
              "1        92895     2708  444456******4210  2019-12-01T22:45:37.873639   \n",
              "2        47759    14777  425850******7024  2019-12-01T22:22:43.021495   \n",
              "3        68657    69758  464296******3991  2019-12-01T21:59:19.797129   \n",
              "4        54075    64367  650487******6116  2019-12-01T21:30:53.347051   \n",
              "\n",
              "   transaction_amount  device_id  has_cbk  \n",
              "0              374.56   285475.0        0  \n",
              "1              734.87   497105.0        1  \n",
              "2              760.36        NaN        0  \n",
              "3             2556.13        NaN        1  \n",
              "4               55.36   860232.0        0  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-065fd326-ae98-42bd-bf19-65a192758be6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>user_id</th>\n",
              "      <th>card_number</th>\n",
              "      <th>transaction_date</th>\n",
              "      <th>transaction_amount</th>\n",
              "      <th>device_id</th>\n",
              "      <th>has_cbk</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>29744</td>\n",
              "      <td>97051</td>\n",
              "      <td>434505******9116</td>\n",
              "      <td>2019-12-01T23:16:32.812632</td>\n",
              "      <td>374.56</td>\n",
              "      <td>285475.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>92895</td>\n",
              "      <td>2708</td>\n",
              "      <td>444456******4210</td>\n",
              "      <td>2019-12-01T22:45:37.873639</td>\n",
              "      <td>734.87</td>\n",
              "      <td>497105.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47759</td>\n",
              "      <td>14777</td>\n",
              "      <td>425850******7024</td>\n",
              "      <td>2019-12-01T22:22:43.021495</td>\n",
              "      <td>760.36</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>68657</td>\n",
              "      <td>69758</td>\n",
              "      <td>464296******3991</td>\n",
              "      <td>2019-12-01T21:59:19.797129</td>\n",
              "      <td>2556.13</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54075</td>\n",
              "      <td>64367</td>\n",
              "      <td>650487******6116</td>\n",
              "      <td>2019-12-01T21:30:53.347051</td>\n",
              "      <td>55.36</td>\n",
              "      <td>860232.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-065fd326-ae98-42bd-bf19-65a192758be6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-cc4ec49c-e90f-43ce-810b-4e96b463f9d4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc4ec49c-e90f-43ce-810b-4e96b463f9d4')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-cc4ec49c-e90f-43ce-810b-4e96b463f9d4 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-065fd326-ae98-42bd-bf19-65a192758be6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-065fd326-ae98-42bd-bf19-65a192758be6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Analise inicial"
      ],
      "metadata": {
        "id": "FFreyGKVsV5L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# tipos\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vwzc-YbjsScm",
        "outputId": "f2146eeb-b734-4bc3-b888-57a217ef6d14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "merchant_id             int64\n",
              "user_id                 int64\n",
              "card_number            object\n",
              "transaction_date       object\n",
              "transaction_amount    float64\n",
              "device_id             float64\n",
              "has_cbk                 int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# convertendo o formato de data pra ficar mais fÃ¡cil de trabalhar\n",
        "df['transaction_date']=pd.to_datetime(df['transaction_date'])\n",
        "df['mes'] = df['transaction_date'].map(lambda x: x.strftime('%Y%m'))"
      ],
      "metadata": {
        "id": "LLPOhwvrttiu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby('mes').count().iloc[:,0] # Agrupamento pra saber quais meses temos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WO4NfBlDxQvk",
        "outputId": "d5edfc53-a0cb-40e4-83ae-6c577d876ae6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "mes\n",
              "201911    3047\n",
              "201912     152\n",
              "Name: merchant_id, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "odc_jV-6xQNu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# volumes\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uZ9v-g1AsaFY",
        "outputId": "6657b25a-d0fc-4a64-da82-3c515ed134e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3199, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# fraudes - 391 registros de CBK\n",
        "df['has_cbk'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "77V2vY8XtoVA",
        "outputId": "54fb4f57-1d9d-4323-949a-071284d4d9d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    2808\n",
              "1     391\n",
              "Name: has_cbk, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "FXbZfsuOyqmz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=df['has_cbk']) # GrÃ¡fico de barras para o ppt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "UE9_auwdyI-j",
        "outputId": "87bd8731-2be2-43f4-9995-d44da346ac7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='has_cbk', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Como nÃ£o hÃ¡ um padrÃ£o nos nÃºmeros , vamos normalizar para usar no treino *atenÃ§Ã£o*\n",
        "df['has_cbk'].value_counts(normalize=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YwqeZ3d-yVct",
        "outputId": "c172a0ef-cc8c-4823-8f27-f45ac91c10fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0.877774\n",
              "1    0.122226\n",
              "Name: has_cbk, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# DistribuiÃ§Ã£o das Fraudes"
      ],
      "metadata": {
        "id": "4msCsuGtzKYq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# mensal\n",
        "pd.crosstab(df['has_cbk'],df['mes'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "CXupc81iywWq",
        "outputId": "65f8556b-1531-49b5-82e5-df4771b19e46"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "mes      201911  201912\n",
              "has_cbk                \n",
              "0          2683     125\n",
              "1           364      27"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-e128ffba-1770-49a0-9701-09b721efb846\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>mes</th>\n",
              "      <th>201911</th>\n",
              "      <th>201912</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>has_cbk</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2683</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>364</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e128ffba-1770-49a0-9701-09b721efb846')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-be98ca58-899a-404c-87f4-0e735502e294\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be98ca58-899a-404c-87f4-0e735502e294')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-be98ca58-899a-404c-87f4-0e735502e294 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e128ffba-1770-49a0-9701-09b721efb846 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e128ffba-1770-49a0-9701-09b721efb846');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# mensal normalizado por mes *AtenÃ§Ã£o*\n",
        "pd.crosstab(df['has_cbk'],df['mes'],normalize='index')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "k31q8gkxy5dh",
        "outputId": "d6ebdf60-1695-4787-8b6f-9265851e96d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "mes        201911    201912\n",
              "has_cbk                    \n",
              "0        0.955484  0.044516\n",
              "1        0.930946  0.069054"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-5f7fff77-b8c0-4708-8772-9150a8b5b538\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>mes</th>\n",
              "      <th>201911</th>\n",
              "      <th>201912</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>has_cbk</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.955484</td>\n",
              "      <td>0.044516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.930946</td>\n",
              "      <td>0.069054</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f7fff77-b8c0-4708-8772-9150a8b5b538')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-427b897f-23f9-4846-8336-87e44e74791d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-427b897f-23f9-4846-8336-87e44e74791d')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-427b897f-23f9-4846-8336-87e44e74791d button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5f7fff77-b8c0-4708-8772-9150a8b5b538 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5f7fff77-b8c0-4708-8772-9150a8b5b538');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# mensal\n",
        "pd.crosstab(df['mes'],df['has_cbk']).plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "D817WSLFzAXn",
        "outputId": "5ac2d4cb-832b-4de2-c607-4cf5750c4ec7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='mes'>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Por valor de compra"
      ],
      "metadata": {
        "id": "2xVLhp-zzdAc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x='has_cbk',y='transaction_amount',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "QaX9-_WXzTLH",
        "outputId": "925c3350-a0a7-4c88-bdc2-815f108c6240"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='has_cbk', ylabel='transaction_amount'>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "HÃ¡ uma diferenÃ§a na distribuÃ§Ã£o do valor de compra entre fraude e nÃ£o fraude. Pelo boxplot nota-se que em operaÃ§Ãµes fraudulentas, em geral, o valor de compra Ã© maior. TambÃ©m hÃ¡ uma menor variÃ¢ncia para as operaÃ§Ãµes nÃ£o fraudulentas, o que pode indicar um possÃ­vel padrÃ£o nessas operaÃ§Ãµes"
      ],
      "metadata": {
        "id": "LZf9q4Os9LzL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=df,x='transaction_amount',hue='has_cbk') # Descartar essa visÃ£o; NÃ£o ficou legal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "QZH_Aozfzuxx",
        "outputId": "8bec48fa-ae09-4622-8289-4b4cdbe3cec8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='transaction_amount', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sdWxsVoq9Ljd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1,2,figsize=(14,5)) # Barras de CBK True vs CBK False\n",
        "df.loc[df['has_cbk']==0,'transaction_amount'].plot(kind='hist',bins=40,title='Transaction Amount for has_cbk False',ax=ax[0])\n",
        "df.loc[df['has_cbk']==1,'transaction_amount'].plot(kind='hist',bins=40,title='Transaction Amount for has_cbk True',ax=ax[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "-bDGSGKT0u5R",
        "outputId": "b32b58d9-345d-4837-d8ff-f0a9d3e73c0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Transaction Amount for has_cbk True'}, ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DYezCCIh1o3s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Por passo de Tempo\n",
        "\n",
        "\n",
        "como o perÃ­odo de tempo foi apenas menor que 60 dias, a maior granularidade usada foi dia da semana."
      ],
      "metadata": {
        "id": "C1ZjVoxp2I_a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['weekday']=df['transaction_date'].dt.weekday\n",
        "df['hourday']=df['transaction_date'].dt.hour\n",
        "df['minutesday']=df['transaction_date'].dt.minute"
      ],
      "metadata": {
        "id": "yDcUuO7f2Ax8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_summary_timestep(timestep, df=df):\n",
        "  '''\n",
        "  Retorna um dataframe com agregados de fraude e nao fraude para o timestep.\n",
        "\n",
        "  inputs:\n",
        "    timestep: str  columns com o timestep desejado\n",
        "  '''\n",
        "\n",
        "  df_summary = pd.crosstab(df[timestep],df['has_cbk'])\n",
        "  df_summary = df_summary.rename(columns={1:'fraude',0:'n_fraude'})\n",
        "  df_summary['total']=df_summary.sum(axis=1)\n",
        "  df_summary['percentual'] = df_summary.apply(lambda x: round((x['fraude']/x['total'])*100,1) ,axis=1)\n",
        "  return df_summary\n"
      ],
      "metadata": {
        "id": "ZEAB44wy5wNI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "tVcggiKc2lQ3",
        "outputId": "77fbb7ce-47e8-4d4f-9aa9-2dea6146546f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   merchant_id  user_id       card_number           transaction_date  \\\n",
              "0        29744    97051  434505******9116 2019-12-01 23:16:32.812632   \n",
              "1        92895     2708  444456******4210 2019-12-01 22:45:37.873639   \n",
              "2        47759    14777  425850******7024 2019-12-01 22:22:43.021495   \n",
              "3        68657    69758  464296******3991 2019-12-01 21:59:19.797129   \n",
              "4        54075    64367  650487******6116 2019-12-01 21:30:53.347051   \n",
              "\n",
              "   transaction_amount  device_id  has_cbk     mes  weekday  hourday  \\\n",
              "0              374.56   285475.0        0  201912        6       23   \n",
              "1              734.87   497105.0        1  201912        6       22   \n",
              "2              760.36        NaN        0  201912        6       22   \n",
              "3             2556.13        NaN        1  201912        6       21   \n",
              "4               55.36   860232.0        0  201912        6       21   \n",
              "\n",
              "   minutesday  \n",
              "0          16  \n",
              "1          45  \n",
              "2          22  \n",
              "3          59  \n",
              "4          30  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-426ff1a7-4ac2-4a36-9e21-dc9fa7851046\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>user_id</th>\n",
              "      <th>card_number</th>\n",
              "      <th>transaction_date</th>\n",
              "      <th>transaction_amount</th>\n",
              "      <th>device_id</th>\n",
              "      <th>has_cbk</th>\n",
              "      <th>mes</th>\n",
              "      <th>weekday</th>\n",
              "      <th>hourday</th>\n",
              "      <th>minutesday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>29744</td>\n",
              "      <td>97051</td>\n",
              "      <td>434505******9116</td>\n",
              "      <td>2019-12-01 23:16:32.812632</td>\n",
              "      <td>374.56</td>\n",
              "      <td>285475.0</td>\n",
              "      <td>0</td>\n",
              "      <td>201912</td>\n",
              "      <td>6</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>92895</td>\n",
              "      <td>2708</td>\n",
              "      <td>444456******4210</td>\n",
              "      <td>2019-12-01 22:45:37.873639</td>\n",
              "      <td>734.87</td>\n",
              "      <td>497105.0</td>\n",
              "      <td>1</td>\n",
              "      <td>201912</td>\n",
              "      <td>6</td>\n",
              "      <td>22</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47759</td>\n",
              "      <td>14777</td>\n",
              "      <td>425850******7024</td>\n",
              "      <td>2019-12-01 22:22:43.021495</td>\n",
              "      <td>760.36</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>201912</td>\n",
              "      <td>6</td>\n",
              "      <td>22</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>68657</td>\n",
              "      <td>69758</td>\n",
              "      <td>464296******3991</td>\n",
              "      <td>2019-12-01 21:59:19.797129</td>\n",
              "      <td>2556.13</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>201912</td>\n",
              "      <td>6</td>\n",
              "      <td>21</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54075</td>\n",
              "      <td>64367</td>\n",
              "      <td>650487******6116</td>\n",
              "      <td>2019-12-01 21:30:53.347051</td>\n",
              "      <td>55.36</td>\n",
              "      <td>860232.0</td>\n",
              "      <td>0</td>\n",
              "      <td>201912</td>\n",
              "      <td>6</td>\n",
              "      <td>21</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-426ff1a7-4ac2-4a36-9e21-dc9fa7851046')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-6133c199-d56e-4d6b-8df3-778608c4a167\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6133c199-d56e-4d6b-8df3-778608c4a167')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-6133c199-d56e-4d6b-8df3-778608c4a167 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-426ff1a7-4ac2-4a36-9e21-dc9fa7851046 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-426ff1a7-4ac2-4a36-9e21-dc9fa7851046');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_summary_weekday=get_summary_timestep('weekday') # quebrar a semana\n",
        "df_summary_weekday"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "_5a918aZ5S-X",
        "outputId": "9808d5a7-c6dc-4fe4-e533-a52106751e6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "has_cbk  n_fraude  fraude  total  percentual\n",
              "weekday                                     \n",
              "0             264      20    284         7.0\n",
              "1             240      16    256         6.2\n",
              "2             123      34    157        21.7\n",
              "3             488      61    549        11.1\n",
              "4             685     120    805        14.9\n",
              "5             657      99    756        13.1\n",
              "6             351      41    392        10.5"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-031e5483-149c-44c0-9aad-489fadd32c46\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>has_cbk</th>\n",
              "      <th>n_fraude</th>\n",
              "      <th>fraude</th>\n",
              "      <th>total</th>\n",
              "      <th>percentual</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weekday</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>264</td>\n",
              "      <td>20</td>\n",
              "      <td>284</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>240</td>\n",
              "      <td>16</td>\n",
              "      <td>256</td>\n",
              "      <td>6.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>123</td>\n",
              "      <td>34</td>\n",
              "      <td>157</td>\n",
              "      <td>21.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>488</td>\n",
              "      <td>61</td>\n",
              "      <td>549</td>\n",
              "      <td>11.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>685</td>\n",
              "      <td>120</td>\n",
              "      <td>805</td>\n",
              "      <td>14.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>657</td>\n",
              "      <td>99</td>\n",
              "      <td>756</td>\n",
              "      <td>13.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>351</td>\n",
              "      <td>41</td>\n",
              "      <td>392</td>\n",
              "      <td>10.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-031e5483-149c-44c0-9aad-489fadd32c46')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-5824a0c2-2470-48f0-89f1-7c70ab4423e7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5824a0c2-2470-48f0-89f1-7c70ab4423e7')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-5824a0c2-2470-48f0-89f1-7c70ab4423e7 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-031e5483-149c-44c0-9aad-489fadd32c46 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-031e5483-149c-44c0-9aad-489fadd32c46');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax=df_summary_weekday['percentual'].plot(color='g',figsize=(10,4),ylabel='Percentual de fraudes',title='Volume por dia da semana',ylim=(0,24))\n",
        "df_summary_weekday['total'].plot(kind='bar',ylabel='Total de transacoes',ax=ax,secondary_y=True,ylim=(0,3000))\n",
        "#Lembrar de falar que o descolamento Ã© por conta do baixo volume de transaÃ§Ãµes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "wV5kScW6-S8G",
        "outputId": "1d7c738a-22e8-4916-861d-5313afc4ed42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Total de transacoes'>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4QAAAGBCAYAAAA+HH+hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACJ1klEQVR4nOzdd1gUVxcG8HfpTaqCiihYQJBqF3tvsZdYY++9xBp7jxi/aOyxxG401qigBjUae6WIDcWCBRSW3ne+P9CNG1DZFZxd9v09j0/kzsydMzmucrhz75UIgiCAiIiIiIiItI6O2AEQERERERGROFgQEhERERERaSkWhERERERERFqKBSEREREREZGWYkFIRERERESkpVgQEhERERERaSkWhERERERERFqKBSEREREREZGWYkFIRERERESkpVgQEhEVgP79+6Nhw4aQyWQfPadjx45o06ZNnvq7fPkyXFxc8Pfff+dXiIVWWloaXFxcsHLlSgAF//+udu3amDJlSoH0TUREVNBYEBIRFYDOnTvjxYsXuHTpUq7H79+/j9DQUHTp0uUrR6Z9fHx8cP78edSsWVPsUIiIiNQOC0IiogLQpEkTWFpaYv/+/bkeP3DgAAwMDNC2bduvHJn2MTAwQLFixWBgYCB2KERERGqHBSERUQF4X+ydOnUKiYmJCseysrJw5MgRNG3aFJaWlgCA06dPo2vXrvD09IS3tze6d++Of/7556P9r1y5Ei4uLkhLS1Nod3FxgZ+fHwDFVyWHDh0KHx8f1K5dG5s2bUJcXBxGjx6NypUro27duvjtt98U+nn8+DFGjRqFevXqwdPTEx07dkRgYOAnn3nlypVwd3fH3bt35c9St25drF+/XuG8169fY8KECahZsybc3d3RpEkTrFixApmZmfJzGjVqhPnz52Pq1Knw8vL65L1XrVqFOnXqwNPTE927d8e9e/cUjuf2yujhw4fRoUMHeHh4oEqVKujevTuuXLnyyecDgD179qBRo0bw8PBA+/btcx0Bfv//rnr16nB3d0fTpk2xZs2aT74+/L7vNm3awNvbG9WqVUP//v0RGhoqPy4IArZs2YJ27drB29sbvr6+mDlzJuLj4+XnTJkyBd988w3Onj2LVq1ayeMMCwvDxYsX0a5dO3h5eaFTp064e/eu/LrMzEz8/PPPaNy4MSpVqoTatWtj9OjR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IiLSeGpbENrZ2WH9+vUIDAxEjRo10K1bN9StWxfff/+92KEREREREREVCmo9h7BatWrYvXu32GEQEREREREVSmpdEBIRUeHUf3Gg2CEUmE1TGokdAhERUZ6p7SujREREREREYnBxcYG7uzs8PDzkv+bNmwcAuHjxIjp37ozKlSujdevWOHz4sMK1W7duRfPmzVG5cmV0794dISEhYjxCnnGEkIiIiIiI6D/8/f1RqlQphbaoqCgMHz4c06dPR5s2bXD9+nUMGzYMTk5O8PDwQGBgIFauXIlff/0VLi4u2Lp1K4YOHYoTJ07AxMREpCf5NI4QEhERERER5cGRI0fg6OiIzp07w9DQEL6+vmjUqBH27t0LANizZw86duwILy8vGBkZYeDAgQCA06dPixn2J7EgJCIiIiIi+o9ly5ahQYMGqFq1KmbMmIGkpCSEhobCzc1N4Tw3Nzf5a6H/Pa6jowNXV1cEBwd/1diVwYKQiIiIiIjoA97e3vD19cWJEyewZ88e3Lp1C3PmzIFUKoW5ubnCuZaWloiNjQUASKVSWFhYKBy3sLCQH1dHnENIRERERET0gT179sh/X65cOUycOBHDhg1DlSpVPnutIAgFGVq+4wghERERERHRJ5QqVQpZWVnQ0dGBVCpVOBYbGwtra2sAgJWVVY7jUqlUflwdsSAkIiIiIiJ6586dO1i8eLFCW3h4OAwMDFC/fv0c20iEhITAy8sLAODu7o7Q0FD5saysLNy5c0d+XB2xICQiIiIiInrHxsYGe/bswfr165Geno7Hjx/j559/xrfffot27dohMjISe/fuRVpaGs6ePYuzZ8+ia9euAIDu3bvj4MGDuHXrFlJSUrBmzRoYGBigQYMG4j7UJ3AOIRERERER0Tt2dnZYv349li1bJi/oOnTogHHjxsHQ0BDr1q3D/PnzMWfOHNjb22Pp0qWoWLEiAKBevXoYP348xo4di7dv38LDwwPr16+HkZGRyE/1cSwIiYiIiIiIPlCtWjXs3r37o8cOHTr00Wt79OiBHj16FFRo+Y6vjBIREREREWkpFoRERERERERaigUhERERERGRlmJBSEREREREpKVYEBIREREREWkprjJKRERERKSm+i8OFDuEArNpSiOxQyBwhJCIiIiIiEhrsSAkIiIiIiLSUiwIiYiIiIiItBQLQiIiIiIiIi3FgpCIiIiIiEhLsSAkIiIiIiLSUiwIiYiIiIiItBQLQiIiIiIiIi3FgpCIiIiIiEhLsSAkIiIiIiLSUnpiB1CY9F8cKHYIBWbTlEZih0BERERERPmMI4RERERERERaigUhERERERGRluIro6T1CvOrvgBf9yUiIiKij+MIIRERERERkZZiQUhERERERKSlWBASERERERFpKRaEREREREREWooFIRERERERkZZiQUhERERERKSlWBASERERERFpKRaEREREREREWooFIRERERERkZbSEzsAIiJV9V8cKHYIBWbTlEZih0BERERagCOEREREREREWooFIRERERERkZZiQUhERERERKSlWBASERERERFpKRaEREREREREWooFIRERERERkZZiQUhERERERKSlWBASERERERFpKRaEREREREREWooFIRERERERkZZiQUhERERERKSl1LogjIyMxODBg1GjRg00bNgQS5cuhUwmEzssIiIiIiIqxLSpDtETO4BPGTVqFCpVqoRTp07h7du3GDJkCIoWLYp+/fqJHRoRERERERVS2lSHqO0IYXBwMO7evYuJEyeiSJEicHR0RN++fbFnzx6xQyMiIiIiokJK2+oQtR0hDA0Nhb29PSwsLORtlSpVwuPHj5GYmAgzM7PP9qGjI4GOjqQgw9Qaenpq+7MD+gzmTjMxb5qLudNczJ3mYu40k7rmLT/qEE2itgWhVCqFubm5Qtv7pMTGxuYpETY2XzdZR5a1+6r3o/zBvGku5k5zMXeaiXnTXMyd5mLuvr78qEM0iXqW5e8IgiB2CEREREREpGW0qQ5R24LQ2toaUqlUoU0qlUIikcDa2lqcoIiIiIiIqFDTtjpEbQtCd3d3vHz5EjExMfK24OBglC9fHqampiJGRkREREREhZW21SFqWxC6ubnBw8MDy5YtQ2JiIsLDw7F582Z0795d7NCIiIiIiKiQ0rY6RCKo8Quyr169wowZM3DlyhWYmZmhW7duGDlyJCQSrhxKREREREQFQ5vqELUuCImIiIiIiKjgqO0ro0RERERERFSwWBASERERERFpKRaEREREREREWooFIRERERERkZZiQahBkpOTERkZicjISKSkpIgdDpHWevnypdghkBJiY2ORmJgodhikgmPHjiEtLU3sMEgJGRkZeP36NbhmoeZJT0/Hq1evIJPJxA6FvjIW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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nas terÃ§as feiras (dia 2 na sÃ©rie) ocorre um aumento do fraÃ§Ã£o de fraudes, porÃ©m tambÃ©m Ã© o dia com menor volume de transaÃ§Ã£o, o que pode afetar o calculo do percentual dado o tamanho reduzido da base"
      ],
      "metadata": {
        "id": "Y-gPoWXVADuV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_summary_hourday=get_summary_timestep('hourday')\n",
        "df_summary_hourday"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "J25IthsQ68ME",
        "outputId": "57bc4552-bffa-4714-ca8c-cea1669d06d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "has_cbk  n_fraude  fraude  total  percentual\n",
              "hourday                                     \n",
              "0             109      24    133        18.0\n",
              "1              97      14    111        12.6\n",
              "2              43      18     61        29.5\n",
              "3              26       4     30        13.3\n",
              "4               7       0      7         0.0\n",
              "5               4       0      4         0.0\n",
              "6               1       1      2        50.0\n",
              "8               3       0      3         0.0\n",
              "9               7       0      7         0.0\n",
              "10             29       0     29         0.0\n",
              "11             88       5     93         5.4\n",
              "12            102       9    111         8.1\n",
              "13            184      11    195         5.6\n",
              "14            231      16    247         6.5\n",
              "15            221      18    239         7.5\n",
              "16            248      30    278        10.8\n",
              "17            240      31    271        11.4\n",
              "18            255      23    278         8.3\n",
              "19            218      44    262        16.8\n",
              "20            235      37    272        13.6\n",
              "21            185      42    227        18.5\n",
              "22            134      29    163        17.8\n",
              "23            141      35    176        19.9"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-bbc09fc5-6592-4152-a2b8-8ec5e8817d87\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>has_cbk</th>\n",
              "      <th>n_fraude</th>\n",
              "      <th>fraude</th>\n",
              "      <th>total</th>\n",
              "      <th>percentual</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hourday</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>109</td>\n",
              "      <td>24</td>\n",
              "      <td>133</td>\n",
              "      <td>18.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>97</td>\n",
              "      <td>14</td>\n",
              "      <td>111</td>\n",
              "      <td>12.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43</td>\n",
              "      <td>18</td>\n",
              "      <td>61</td>\n",
              "      <td>29.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>26</td>\n",
              "      <td>4</td>\n",
              "      <td>30</td>\n",
              "      <td>13.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>29</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>88</td>\n",
              "      <td>5</td>\n",
              "      <td>93</td>\n",
              "      <td>5.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>102</td>\n",
              "      <td>9</td>\n",
              "      <td>111</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>184</td>\n",
              "      <td>11</td>\n",
              "      <td>195</td>\n",
              "      <td>5.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>231</td>\n",
              "      <td>16</td>\n",
              "      <td>247</td>\n",
              "      <td>6.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>221</td>\n",
              "      <td>18</td>\n",
              "      <td>239</td>\n",
              "      <td>7.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>248</td>\n",
              "      <td>30</td>\n",
              "      <td>278</td>\n",
              "      <td>10.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>240</td>\n",
              "      <td>31</td>\n",
              "      <td>271</td>\n",
              "      <td>11.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>255</td>\n",
              "      <td>23</td>\n",
              "      <td>278</td>\n",
              "      <td>8.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>218</td>\n",
              "      <td>44</td>\n",
              "      <td>262</td>\n",
              "      <td>16.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>235</td>\n",
              "      <td>37</td>\n",
              "      <td>272</td>\n",
              "      <td>13.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>185</td>\n",
              "      <td>42</td>\n",
              "      <td>227</td>\n",
              "      <td>18.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>134</td>\n",
              "      <td>29</td>\n",
              "      <td>163</td>\n",
              "      <td>17.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>141</td>\n",
              "      <td>35</td>\n",
              "      <td>176</td>\n",
              "      <td>19.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbc09fc5-6592-4152-a2b8-8ec5e8817d87')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-1bab0083-e1d0-41fc-9786-db7cfda9af2b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bab0083-e1d0-41fc-9786-db7cfda9af2b')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-1bab0083-e1d0-41fc-9786-db7cfda9af2b button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bbc09fc5-6592-4152-a2b8-8ec5e8817d87 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bbc09fc5-6592-4152-a2b8-8ec5e8817d87');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax=df_summary_hourday['percentual'].plot(color='g',figsize=(10,4),ylabel='Percentual de fraudes',title='Volume por hora do dia',ylim=(0,60))\n",
        "df_summary_hourday['total'].plot(kind='bar',ylabel='Total de transacoes',ax=ax,secondary_y=True,ylim=(0,1500))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "clwNymQ1AegC",
        "outputId": "0711166f-4f6a-4260-aca9-61010c30ec1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Total de transacoes'>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_summary_minutesday=get_summary_timestep('minutesday')"
      ],
      "metadata": {
        "id": "z6lGlNs08Cd4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax=df_summary_minutesday['percentual'].plot(color='g',figsize=(10,4),xlabel='Minutos',ylabel='Percentual de fraudes',title='minutos dentro de uma hora',ylim=(0,30))\n",
        "df_summary_minutesday['total'].plot(kind='bar',ylabel='Total de transacoes',xlabel='Minutos',ax=ax,secondary_y=True,ylim=(0,200))\n",
        "# Dado granular demais; Descartar!"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "uCUJMbMM6r-x",
        "outputId": "c49351f8-5b2c-436b-beac-984d5ed50304"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Total de transacoes'>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "rbDH3G35rqjC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Durante"
      ],
      "metadata": {
        "id": "L0TXzLC7B8sQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Recorrencias (PERFIS)\n",
        "\n"
      ],
      "metadata": {
        "id": "vgUQDdvTCd8L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Criar perfis para entender o comportamento do usuÃ¡rio e do EC.\n",
        "De antemÃ£o, dÃ¡ para sacar que a base Ã© pequena e que isso vai afetar muito a forma como os perfis serÃ£o preenchidos\n",
        "\n"
      ],
      "metadata": {
        "id": "WtkgqiYX2vDs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## user_id (perfis dos usuÃ¡rios)\n",
        "\n",
        "ComeÃ§ar com usuÃ¡rios para entender comoportamentos\n"
      ],
      "metadata": {
        "id": "6IuL3soKCrYr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_user_id = df.value_counts('user_id',ascending=False).reset_index().rename(columns={0:'num_transacoes'})\n",
        "df_user_id.head() #"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "IUDHykHjCLK9",
        "outputId": "58789262-3e62-440d-ad8d-3bb77ae6bc70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  num_transacoes\n",
              "0    11750              31\n",
              "1    91637              22\n",
              "2    79054              17\n",
              "3    96025              14\n",
              "4    78262              13"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-0d8535b4-2f24-4daa-8c12-71230dfacf6d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>11750</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91637</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>79054</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>96025</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>78262</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0d8535b4-2f24-4daa-8c12-71230dfacf6d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-3bf34bc8-e9be-4c61-8120-be4bebfe4a9a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bf34bc8-e9be-4c61-8120-be4bebfe4a9a')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-3bf34bc8-e9be-4c61-8120-be4bebfe4a9a button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0d8535b4-2f24-4daa-8c12-71230dfacf6d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0d8535b4-2f24-4daa-8c12-71230dfacf6d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_user_id.describe()\n",
        "# Copiado - projeto"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "BN86haOFDdUY",
        "outputId": "e16e7525-e4a3-4bc2-a4fa-736266eaa481"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            user_id  num_transacoes\n",
              "count   2704.000000     2704.000000\n",
              "mean   50984.074334        1.183062\n",
              "std    29135.330150        1.052521\n",
              "min        6.000000        1.000000\n",
              "25%    25423.250000        1.000000\n",
              "50%    52239.000000        1.000000\n",
              "75%    75902.250000        1.000000\n",
              "max    99974.000000       31.000000"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-db3e4e28-4b78-46c2-8a80-1765000b0060\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2704.000000</td>\n",
              "      <td>2704.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>50984.074334</td>\n",
              "      <td>1.183062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>29135.330150</td>\n",
              "      <td>1.052521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>25423.250000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>52239.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>75902.250000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>99974.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db3e4e28-4b78-46c2-8a80-1765000b0060')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-61fe4125-4f25-406c-beab-3fb8a2ddbfc1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-61fe4125-4f25-406c-beab-3fb8a2ddbfc1')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-61fe4125-4f25-406c-beab-3fb8a2ddbfc1 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-db3e4e28-4b78-46c2-8a80-1765000b0060 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-db3e4e28-4b78-46c2-8a80-1765000b0060');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_user_id['num_transacoes'].plot(kind='hist',bins=20,logy=False)\n",
        "#projeto"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "id": "2yZwVjEmD-bT",
        "outputId": "ad450f37-7a92-4c43-dccd-888f7d13443b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*ReincidÃªnia* na base Ã© muito baixa\n",
        "\n",
        "> reviar esse dado depois*\n",
        "\n"
      ],
      "metadata": {
        "id": "xC5MCMTiET8r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "CriaÃ§Ã£o de perfis  baseado no id_describe\n"
      ],
      "metadata": {
        "id": "RY6wtXyc18gO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_user_id=df_user_id.merge(\n",
        "    df.groupby('user_id').agg(\n",
        "        valor_transacoes=('transaction_amount','sum')\n",
        "        ,avg_valor_transacoes=('transaction_amount','mean')\n",
        "        ,max_valor_transacoes=('transaction_amount','max')\n",
        "        ,min_valor_transacoes=('transaction_amount','min')\n",
        "        ,std_valor_transacoes=('transaction_amount','std')\n",
        "        ,num_fraudes=('has_cbk','sum')\n",
        "    ).reset_index(),\n",
        "    on='user_id',\n",
        "    how='left'\n",
        ")"
      ],
      "metadata": {
        "id": "xYo_wR1UEvYr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "UsuÃ¡rios que tem muita recorrÃªncia tendem a ter muita fraude. Esse comportamento Ã© estranho!"
      ],
      "metadata": {
        "id": "pJwHZKxS1w5S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_user_id.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "7ysFOnhAFlJ3",
        "outputId": "b0013300-27c0-441d-f733-f4d81c1c7659"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  num_transacoes  valor_transacoes  avg_valor_transacoes  \\\n",
              "0    11750              31          17816.26            574.718065   \n",
              "1    91637              22          17335.51            787.977727   \n",
              "2    79054              17          35497.93           2088.113529   \n",
              "3    96025              14          30200.22           2157.158571   \n",
              "4    78262              13          39195.13           3015.010000   \n",
              "\n",
              "   max_valor_transacoes  min_valor_transacoes  std_valor_transacoes  \\\n",
              "0                688.87                 10.46            126.028873   \n",
              "1               1416.70                550.05            192.152996   \n",
              "2               3165.49                469.97            653.914911   \n",
              "3               2904.60                 50.71            697.402386   \n",
              "4               4097.21                943.14           1415.753326   \n",
              "\n",
              "   num_fraudes  \n",
              "0           25  \n",
              "1           19  \n",
              "2           15  \n",
              "3           13  \n",
              "4           12  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-3c8624ed-c392-42f5-8246-00215391a6f2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "      <th>valor_transacoes</th>\n",
              "      <th>avg_valor_transacoes</th>\n",
              "      <th>max_valor_transacoes</th>\n",
              "      <th>min_valor_transacoes</th>\n",
              "      <th>std_valor_transacoes</th>\n",
              "      <th>num_fraudes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>11750</td>\n",
              "      <td>31</td>\n",
              "      <td>17816.26</td>\n",
              "      <td>574.718065</td>\n",
              "      <td>688.87</td>\n",
              "      <td>10.46</td>\n",
              "      <td>126.028873</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91637</td>\n",
              "      <td>22</td>\n",
              "      <td>17335.51</td>\n",
              "      <td>787.977727</td>\n",
              "      <td>1416.70</td>\n",
              "      <td>550.05</td>\n",
              "      <td>192.152996</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>79054</td>\n",
              "      <td>17</td>\n",
              "      <td>35497.93</td>\n",
              "      <td>2088.113529</td>\n",
              "      <td>3165.49</td>\n",
              "      <td>469.97</td>\n",
              "      <td>653.914911</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>96025</td>\n",
              "      <td>14</td>\n",
              "      <td>30200.22</td>\n",
              "      <td>2157.158571</td>\n",
              "      <td>2904.60</td>\n",
              "      <td>50.71</td>\n",
              "      <td>697.402386</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>78262</td>\n",
              "      <td>13</td>\n",
              "      <td>39195.13</td>\n",
              "      <td>3015.010000</td>\n",
              "      <td>4097.21</td>\n",
              "      <td>943.14</td>\n",
              "      <td>1415.753326</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c8624ed-c392-42f5-8246-00215391a6f2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-fc63c59b-2caf-4b59-90ed-3c934ae55c8d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc63c59b-2caf-4b59-90ed-3c934ae55c8d')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-fc63c59b-2caf-4b59-90ed-3c934ae55c8d button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3c8624ed-c392-42f5-8246-00215391a6f2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3c8624ed-c392-42f5-8246-00215391a6f2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "CorrelaÃ§Ã£o - RelaÃ§Ã£o entre duas variÃ¡veis;\n",
        "CovarianÃ§a - O tanto que uma variÃ¡vel  varia quando a outra, de modo que dÃ¡ para entender a relaÃ§Ã£o entre as duas variÃ¡veis\n"
      ],
      "metadata": {
        "id": "Tda_Da1Mszxa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_user_id.corr() #Buscar correlaÃ§Ã£o entre compras e fraudes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "QJ2QyRtqFoa7",
        "outputId": "1f10ddd9-cec3-41ce-ae1f-9fe67a447eb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       user_id  num_transacoes  valor_transacoes  \\\n",
              "user_id               1.000000       -0.003589         -0.006886   \n",
              "num_transacoes       -0.003589        1.000000          0.667989   \n",
              "valor_transacoes     -0.006886        0.667989          1.000000   \n",
              "avg_valor_transacoes -0.027363        0.079200          0.604524   \n",
              "max_valor_transacoes -0.027570        0.157063          0.663201   \n",
              "min_valor_transacoes -0.026420       -0.033421          0.474422   \n",
              "std_valor_transacoes -0.023497        0.016809          0.318775   \n",
              "num_fraudes           0.011780        0.898317          0.669159   \n",
              "\n",
              "                      avg_valor_transacoes  max_valor_transacoes  \\\n",
              "user_id                          -0.027363             -0.027570   \n",
              "num_transacoes                    0.079200              0.157063   \n",
              "valor_transacoes                  0.604524              0.663201   \n",
              "avg_valor_transacoes              1.000000              0.984771   \n",
              "max_valor_transacoes              0.984771              1.000000   \n",
              "min_valor_transacoes              0.976269              0.927007   \n",
              "std_valor_transacoes              0.533169              0.743485   \n",
              "num_fraudes                       0.132371              0.201582   \n",
              "\n",
              "                      min_valor_transacoes  std_valor_transacoes  num_fraudes  \n",
              "user_id                          -0.026420             -0.023497     0.011780  \n",
              "num_transacoes                   -0.033421              0.016809     0.898317  \n",
              "valor_transacoes                  0.474422              0.318775     0.669159  \n",
              "avg_valor_transacoes              0.976269              0.533169     0.132371  \n",
              "max_valor_transacoes              0.927007              0.743485     0.201582  \n",
              "min_valor_transacoes              1.000000              0.075905     0.029593  \n",
              "std_valor_transacoes              0.075905              1.000000     0.101551  \n",
              "num_fraudes                       0.029593              0.101551     1.000000  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-e7dc5c3a-b028-4456-b39c-99a9ba58353d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "      <th>valor_transacoes</th>\n",
              "      <th>avg_valor_transacoes</th>\n",
              "      <th>max_valor_transacoes</th>\n",
              "      <th>min_valor_transacoes</th>\n",
              "      <th>std_valor_transacoes</th>\n",
              "      <th>num_fraudes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>user_id</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.003589</td>\n",
              "      <td>-0.006886</td>\n",
              "      <td>-0.027363</td>\n",
              "      <td>-0.027570</td>\n",
              "      <td>-0.026420</td>\n",
              "      <td>-0.023497</td>\n",
              "      <td>0.011780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num_transacoes</th>\n",
              "      <td>-0.003589</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.667989</td>\n",
              "      <td>0.079200</td>\n",
              "      <td>0.157063</td>\n",
              "      <td>-0.033421</td>\n",
              "      <td>0.016809</td>\n",
              "      <td>0.898317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>valor_transacoes</th>\n",
              "      <td>-0.006886</td>\n",
              "      <td>0.667989</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.604524</td>\n",
              "      <td>0.663201</td>\n",
              "      <td>0.474422</td>\n",
              "      <td>0.318775</td>\n",
              "      <td>0.669159</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>avg_valor_transacoes</th>\n",
              "      <td>-0.027363</td>\n",
              "      <td>0.079200</td>\n",
              "      <td>0.604524</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.984771</td>\n",
              "      <td>0.976269</td>\n",
              "      <td>0.533169</td>\n",
              "      <td>0.132371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max_valor_transacoes</th>\n",
              "      <td>-0.027570</td>\n",
              "      <td>0.157063</td>\n",
              "      <td>0.663201</td>\n",
              "      <td>0.984771</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.927007</td>\n",
              "      <td>0.743485</td>\n",
              "      <td>0.201582</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min_valor_transacoes</th>\n",
              "      <td>-0.026420</td>\n",
              "      <td>-0.033421</td>\n",
              "      <td>0.474422</td>\n",
              "      <td>0.976269</td>\n",
              "      <td>0.927007</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.075905</td>\n",
              "      <td>0.029593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std_valor_transacoes</th>\n",
              "      <td>-0.023497</td>\n",
              "      <td>0.016809</td>\n",
              "      <td>0.318775</td>\n",
              "      <td>0.533169</td>\n",
              "      <td>0.743485</td>\n",
              "      <td>0.075905</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.101551</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num_fraudes</th>\n",
              "      <td>0.011780</td>\n",
              "      <td>0.898317</td>\n",
              "      <td>0.669159</td>\n",
              "      <td>0.132371</td>\n",
              "      <td>0.201582</td>\n",
              "      <td>0.029593</td>\n",
              "      <td>0.101551</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7dc5c3a-b028-4456-b39c-99a9ba58353d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-74a4c2db-f096-49b4-b8b1-9808c1aed2fd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-74a4c2db-f096-49b4-b8b1-9808c1aed2fd')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-74a4c2db-f096-49b4-b8b1-9808c1aed2fd button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e7dc5c3a-b028-4456-b39c-99a9ba58353d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e7dc5c3a-b028-4456-b39c-99a9ba58353d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "HÃ¡ uma forte correlaÃ§Ã£o entre  ocorrÃªncia de fraudes e recorÃªncia de compras - Anotar na anÃ¡lise;\n",
        "(-1 a 1 , onde - 1 Ã© uma relaÃ§Ã£o onde uma sobe e a outra acompanha e -1 Ã© uma sobe e a outra desce. Zero significa que nÃ£o hÃ¡ correlaÃ§Ã£o )\n",
        "\n"
      ],
      "metadata": {
        "id": "jV-niauLGml-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(\n",
        "    np.where(df_user_id['num_transacoes']>1,'recorente','n_recorrente'), # Onde n/ transaÃ§Ãµes > 1 , recorrente\n",
        "    df_user_id['num_fraudes']\n",
        "    )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "wZgpqCYyGlhY",
        "outputId": "12d973d2-ad44-408c-c21d-f8f1a36768d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num_fraudes     0   1   2   3   4   5   6   7   10  12  13  15  19  25\n",
              "row_0                                                                 \n",
              "n_recorrente  2405  64   0   0   0   0   0   0   0   0   0   0   0   0\n",
              "recorente      146  11  29  20  15   5   2   1   1   1   1   1   1   1"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-654edf57-b023-41ae-9a17-c89727d5efa7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>num_fraudes</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>10</th>\n",
              "      <th>12</th>\n",
              "      <th>13</th>\n",
              "      <th>15</th>\n",
              "      <th>19</th>\n",
              "      <th>25</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row_0</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>n_recorrente</th>\n",
              "      <td>2405</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>recorente</th>\n",
              "      <td>146</td>\n",
              "      <td>11</td>\n",
              "      <td>29</td>\n",
              "      <td>20</td>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-654edf57-b023-41ae-9a17-c89727d5efa7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-bce6d314-02c6-411c-a5ec-1cfdafbe37b9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bce6d314-02c6-411c-a5ec-1cfdafbe37b9')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-bce6d314-02c6-411c-a5ec-1cfdafbe37b9 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-654edf57-b023-41ae-9a17-c89727d5efa7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-654edf57-b023-41ae-9a17-c89727d5efa7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Apenas 64 clientes que foram recorrentes nÃ£o fizeram fraude."
      ],
      "metadata": {
        "id": "jPAHMhj2-IYn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_user_id.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "qvFC6MvMIcdn",
        "outputId": "b6bda244-2e1b-4daa-a3ad-ae497f48deed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  num_transacoes  valor_transacoes  avg_valor_transacoes  \\\n",
              "0    11750              31          17816.26            574.718065   \n",
              "1    91637              22          17335.51            787.977727   \n",
              "2    79054              17          35497.93           2088.113529   \n",
              "3    96025              14          30200.22           2157.158571   \n",
              "4    78262              13          39195.13           3015.010000   \n",
              "\n",
              "   max_valor_transacoes  min_valor_transacoes  std_valor_transacoes  \\\n",
              "0                688.87                 10.46            126.028873   \n",
              "1               1416.70                550.05            192.152996   \n",
              "2               3165.49                469.97            653.914911   \n",
              "3               2904.60                 50.71            697.402386   \n",
              "4               4097.21                943.14           1415.753326   \n",
              "\n",
              "   num_fraudes  \n",
              "0           25  \n",
              "1           19  \n",
              "2           15  \n",
              "3           13  \n",
              "4           12  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-ff2ed821-b269-44ce-959e-8778ebbcdcad\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "      <th>valor_transacoes</th>\n",
              "      <th>avg_valor_transacoes</th>\n",
              "      <th>max_valor_transacoes</th>\n",
              "      <th>min_valor_transacoes</th>\n",
              "      <th>std_valor_transacoes</th>\n",
              "      <th>num_fraudes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>11750</td>\n",
              "      <td>31</td>\n",
              "      <td>17816.26</td>\n",
              "      <td>574.718065</td>\n",
              "      <td>688.87</td>\n",
              "      <td>10.46</td>\n",
              "      <td>126.028873</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91637</td>\n",
              "      <td>22</td>\n",
              "      <td>17335.51</td>\n",
              "      <td>787.977727</td>\n",
              "      <td>1416.70</td>\n",
              "      <td>550.05</td>\n",
              "      <td>192.152996</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>79054</td>\n",
              "      <td>17</td>\n",
              "      <td>35497.93</td>\n",
              "      <td>2088.113529</td>\n",
              "      <td>3165.49</td>\n",
              "      <td>469.97</td>\n",
              "      <td>653.914911</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>96025</td>\n",
              "      <td>14</td>\n",
              "      <td>30200.22</td>\n",
              "      <td>2157.158571</td>\n",
              "      <td>2904.60</td>\n",
              "      <td>50.71</td>\n",
              "      <td>697.402386</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>78262</td>\n",
              "      <td>13</td>\n",
              "      <td>39195.13</td>\n",
              "      <td>3015.010000</td>\n",
              "      <td>4097.21</td>\n",
              "      <td>943.14</td>\n",
              "      <td>1415.753326</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff2ed821-b269-44ce-959e-8778ebbcdcad')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-e145739d-b1c6-46cb-85d2-85ff3f531f38\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e145739d-b1c6-46cb-85d2-85ff3f531f38')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-e145739d-b1c6-46cb-85d2-85ff3f531f38 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ff2ed821-b269-44ce-959e-8778ebbcdcad button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ff2ed821-b269-44ce-959e-8778ebbcdcad');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A mÃ©dia das transaÃ§Ãµes fraudulentas Ã© bem maior que a mÃ©dia das nÃ£o fraudulentas"
      ],
      "metadata": {
        "id": "5oJ11IO_-lGG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(data=df_user_id,x='num_transacoes',y='num_fraudes',hue='avg_valor_transacoes') #dispersÃ£o pra anÃ¡lise;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "_NkklYMwIjJj",
        "outputId": "7d8c74c1-8dd7-4336-fb82-1297019a3d0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='num_transacoes', ylabel='num_fraudes'>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "HÃ¡ uma forte relaÃ§Ã£o linear entre nÃºmero de transaÃ§Ãµes do usuÃ¡rio e nÃºmero de fraudes em operaÃ§Ãµes do usuÃ¡rio. Aparentemente todos os usuÃ¡rios que tem muitas trasnsaÃ§Ãµes sÃ£o todos plÃ¡sticos comprometidos.\n",
        "(Essa base estÃ¡ enviesada?) * *Passar para o PPT* *\n"
      ],
      "metadata": {
        "id": "TRjAfG16I_yu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Merchant_id\n",
        "Hora de trabalhar com os Mids"
      ],
      "metadata": {
        "id": "OiU9Lzt1EZgt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_merchant_id = df.value_counts('merchant_id',ascending=False).reset_index().rename(columns={0:'num_transacoes'})\n",
        "df_merchant_id.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TudsTvdeEfFO",
        "outputId": "5dc00811-70b5-49f4-b095-1b18826ebc69"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   merchant_id  num_transacoes\n",
              "0        49205              73\n",
              "1        17275              30\n",
              "2         4705              22\n",
              "3        79698              22\n",
              "4        53041              19"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-36332c6a-a8fc-473c-a21e-5cc98fa99b1b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>49205</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17275</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4705</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>79698</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>53041</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36332c6a-a8fc-473c-a21e-5cc98fa99b1b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-cb1cefeb-9cc0-446b-9303-80501c6cf0a2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cb1cefeb-9cc0-446b-9303-80501c6cf0a2')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-cb1cefeb-9cc0-446b-9303-80501c6cf0a2 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-36332c6a-a8fc-473c-a21e-5cc98fa99b1b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-36332c6a-a8fc-473c-a21e-5cc98fa99b1b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merchant_id.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "5fb9df3d-a09d-4c74-a359-e6d58d3da6e2",
        "id": "L3-J5Hl3Kbuw"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        merchant_id  num_transacoes\n",
              "count   1756.000000     1756.000000\n",
              "mean   48793.957859        1.821754\n",
              "std    29091.905047        2.676606\n",
              "min       16.000000        1.000000\n",
              "25%    22920.250000        1.000000\n",
              "50%    48005.000000        1.000000\n",
              "75%    73946.500000        2.000000\n",
              "max    99799.000000       73.000000"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-edf96a19-c064-44f0-849f-81aac497d65e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1756.000000</td>\n",
              "      <td>1756.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>48793.957859</td>\n",
              "      <td>1.821754</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>29091.905047</td>\n",
              "      <td>2.676606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>16.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>22920.250000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>48005.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>73946.500000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>99799.000000</td>\n",
              "      <td>73.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-edf96a19-c064-44f0-849f-81aac497d65e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-b396d95c-f999-4e6e-8111-3163d36720e3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b396d95c-f999-4e6e-8111-3163d36720e3')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-b396d95c-f999-4e6e-8111-3163d36720e3 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-edf96a19-c064-44f0-849f-81aac497d65e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-edf96a19-c064-44f0-849f-81aac497d65e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merchant_id['num_transacoes'].plot(kind='hist',bins=20,logy=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "outputId": "dcde3434-f672-456f-a537-8d488db028f4",
        "id": "EVX1BqOCKbuw"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ReincidÃªnia na base Ã© muito baixa\n",
        "Ou seja, o cara que Ã© fraudador, nÃ£o necessariamente usa de um EC especÃ­fico para fazer transaÃ§Ãµes\n"
      ],
      "metadata": {
        "id": "Ck9Z6gIyKbuw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_merchant_id=df_merchant_id.merge(\n",
        "    df.groupby('merchant_id').agg(\n",
        "        valor_transacoes=('transaction_amount','sum')\n",
        "        ,avg_valor_transacoes=('transaction_amount','mean')\n",
        "        ,max_valor_transacoes=('transaction_amount','max')\n",
        "        ,min_valor_transacoes=('transaction_amount','min')\n",
        "        ,std_valor_transacoes=('transaction_amount','std')\n",
        "        ,num_fraudes=('has_cbk','sum')\n",
        "    ).reset_index(),\n",
        "    on='merchant_id',\n",
        "    how='left'\n",
        ")"
      ],
      "metadata": {
        "id": "U2ZKUpLTKbuw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_merchant_id.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "2315ed86-52ba-45ad-9882-062747b95774",
        "id": "M3apXqBiKbux"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   merchant_id  num_transacoes  valor_transacoes  avg_valor_transacoes  \\\n",
              "0        49205              73          27589.79            377.942329   \n",
              "1        17275              30          17119.72            570.657333   \n",
              "2         4705              22          17335.51            787.977727   \n",
              "3        79698              22           8995.27            408.875909   \n",
              "4        53041              19          21079.55           1109.450000   \n",
              "\n",
              "   max_valor_transacoes  min_valor_transacoes  std_valor_transacoes  \\\n",
              "0               2278.20                 55.61            316.195652   \n",
              "1                688.87                 10.46            126.346295   \n",
              "2               1416.70                550.05            192.152996   \n",
              "3                774.55                 99.90            225.501699   \n",
              "4               3904.44                159.21            896.579877   \n",
              "\n",
              "   num_fraudes  \n",
              "0            0  \n",
              "1           22  \n",
              "2           19  \n",
              "3            0  \n",
              "4           14  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-41c191c5-6457-4cc8-97c0-3d98476c6f42\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "      <th>valor_transacoes</th>\n",
              "      <th>avg_valor_transacoes</th>\n",
              "      <th>max_valor_transacoes</th>\n",
              "      <th>min_valor_transacoes</th>\n",
              "      <th>std_valor_transacoes</th>\n",
              "      <th>num_fraudes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>49205</td>\n",
              "      <td>73</td>\n",
              "      <td>27589.79</td>\n",
              "      <td>377.942329</td>\n",
              "      <td>2278.20</td>\n",
              "      <td>55.61</td>\n",
              "      <td>316.195652</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17275</td>\n",
              "      <td>30</td>\n",
              "      <td>17119.72</td>\n",
              "      <td>570.657333</td>\n",
              "      <td>688.87</td>\n",
              "      <td>10.46</td>\n",
              "      <td>126.346295</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4705</td>\n",
              "      <td>22</td>\n",
              "      <td>17335.51</td>\n",
              "      <td>787.977727</td>\n",
              "      <td>1416.70</td>\n",
              "      <td>550.05</td>\n",
              "      <td>192.152996</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>79698</td>\n",
              "      <td>22</td>\n",
              "      <td>8995.27</td>\n",
              "      <td>408.875909</td>\n",
              "      <td>774.55</td>\n",
              "      <td>99.90</td>\n",
              "      <td>225.501699</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>53041</td>\n",
              "      <td>19</td>\n",
              "      <td>21079.55</td>\n",
              "      <td>1109.450000</td>\n",
              "      <td>3904.44</td>\n",
              "      <td>159.21</td>\n",
              "      <td>896.579877</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41c191c5-6457-4cc8-97c0-3d98476c6f42')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-ebad2da3-88d7-40b4-addd-52875850cb58\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ebad2da3-88d7-40b4-addd-52875850cb58')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-ebad2da3-88d7-40b4-addd-52875850cb58 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-41c191c5-6457-4cc8-97c0-3d98476c6f42 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-41c191c5-6457-4cc8-97c0-3d98476c6f42');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merchant_id.corr() # CorrelaÃ§Ã£o de compras"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "bc0f5f9b-0ddc-48e3-b9fd-e530b1aa7733",
        "id": "QNRRIXm4LCfF"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      merchant_id  num_transacoes  valor_transacoes  \\\n",
              "merchant_id              1.000000       -0.000534         -0.016308   \n",
              "num_transacoes          -0.000534        1.000000          0.629856   \n",
              "valor_transacoes        -0.016308        0.629856          1.000000   \n",
              "avg_valor_transacoes    -0.026078        0.018923          0.512827   \n",
              "max_valor_transacoes    -0.021575        0.179419          0.643618   \n",
              "min_valor_transacoes    -0.029056       -0.120818          0.277592   \n",
              "std_valor_transacoes    -0.002559        0.013476          0.389702   \n",
              "num_fraudes             -0.012010        0.487123          0.593108   \n",
              "\n",
              "                      avg_valor_transacoes  max_valor_transacoes  \\\n",
              "merchant_id                      -0.026078             -0.021575   \n",
              "num_transacoes                    0.018923              0.179419   \n",
              "valor_transacoes                  0.512827              0.643618   \n",
              "avg_valor_transacoes              1.000000              0.946334   \n",
              "max_valor_transacoes              0.946334              1.000000   \n",
              "min_valor_transacoes              0.933810              0.784342   \n",
              "std_valor_transacoes              0.580969              0.794376   \n",
              "num_fraudes                       0.129940              0.223992   \n",
              "\n",
              "                      min_valor_transacoes  std_valor_transacoes  num_fraudes  \n",
              "merchant_id                      -0.029056             -0.002559    -0.012010  \n",
              "num_transacoes                   -0.120818              0.013476     0.487123  \n",
              "valor_transacoes                  0.277592              0.389702     0.593108  \n",
              "avg_valor_transacoes              0.933810              0.580969     0.129940  \n",
              "max_valor_transacoes              0.784342              0.794376     0.223992  \n",
              "min_valor_transacoes              1.000000              0.076840     0.000229  \n",
              "std_valor_transacoes              0.076840              1.000000     0.127793  \n",
              "num_fraudes                       0.000229              0.127793     1.000000  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-2306466f-efeb-4dd4-be86-597f96f29d5c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>num_transacoes</th>\n",
              "      <th>valor_transacoes</th>\n",
              "      <th>avg_valor_transacoes</th>\n",
              "      <th>max_valor_transacoes</th>\n",
              "      <th>min_valor_transacoes</th>\n",
              "      <th>std_valor_transacoes</th>\n",
              "      <th>num_fraudes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>merchant_id</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.000534</td>\n",
              "      <td>-0.016308</td>\n",
              "      <td>-0.026078</td>\n",
              "      <td>-0.021575</td>\n",
              "      <td>-0.029056</td>\n",
              "      <td>-0.002559</td>\n",
              "      <td>-0.012010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num_transacoes</th>\n",
              "      <td>-0.000534</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.629856</td>\n",
              "      <td>0.018923</td>\n",
              "      <td>0.179419</td>\n",
              "      <td>-0.120818</td>\n",
              "      <td>0.013476</td>\n",
              "      <td>0.487123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>valor_transacoes</th>\n",
              "      <td>-0.016308</td>\n",
              "      <td>0.629856</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.512827</td>\n",
              "      <td>0.643618</td>\n",
              "      <td>0.277592</td>\n",
              "      <td>0.389702</td>\n",
              "      <td>0.593108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>avg_valor_transacoes</th>\n",
              "      <td>-0.026078</td>\n",
              "      <td>0.018923</td>\n",
              "      <td>0.512827</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.946334</td>\n",
              "      <td>0.933810</td>\n",
              "      <td>0.580969</td>\n",
              "      <td>0.129940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max_valor_transacoes</th>\n",
              "      <td>-0.021575</td>\n",
              "      <td>0.179419</td>\n",
              "      <td>0.643618</td>\n",
              "      <td>0.946334</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.784342</td>\n",
              "      <td>0.794376</td>\n",
              "      <td>0.223992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min_valor_transacoes</th>\n",
              "      <td>-0.029056</td>\n",
              "      <td>-0.120818</td>\n",
              "      <td>0.277592</td>\n",
              "      <td>0.933810</td>\n",
              "      <td>0.784342</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.076840</td>\n",
              "      <td>0.000229</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std_valor_transacoes</th>\n",
              "      <td>-0.002559</td>\n",
              "      <td>0.013476</td>\n",
              "      <td>0.389702</td>\n",
              "      <td>0.580969</td>\n",
              "      <td>0.794376</td>\n",
              "      <td>0.076840</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.127793</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num_fraudes</th>\n",
              "      <td>-0.012010</td>\n",
              "      <td>0.487123</td>\n",
              "      <td>0.593108</td>\n",
              "      <td>0.129940</td>\n",
              "      <td>0.223992</td>\n",
              "      <td>0.000229</td>\n",
              "      <td>0.127793</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2306466f-efeb-4dd4-be86-597f96f29d5c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-f0107e46-859a-459e-9bdb-ea2636028e6d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f0107e46-859a-459e-9bdb-ea2636028e6d')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-f0107e46-859a-459e-9bdb-ea2636028e6d button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2306466f-efeb-4dd4-be86-597f96f29d5c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2306466f-efeb-4dd4-be86-597f96f29d5c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "hÃ¡ uma forte correlaÃ§Ã£o entre  ocorrÃªncia de fraudes e recorÃªncia de compras -\n",
        "ALÃ©m disso, Ã© estranho que a correlaÃ§Ã£o seja tÃ£o grande tambÃ©m entre o nÃºmero de transaÃ§Ãµes e o seu valor !\n",
        "Outra coisa interessante Ã© que o nÃºmero de fraude estÃ¡ conectado com o valor das transaÃ§Ãµes tambÃ©m.\n",
        "\n"
      ],
      "metadata": {
        "id": "2l5lou0MLCfL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "JIsrgu4zBgIs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(\n",
        "    np.where(df_merchant_id['num_transacoes']>1,'recorente','n_recorrente'), #num_transacoes >1 - Recorrente\n",
        "    df_merchant_id['num_fraudes']\n",
        "    ) # Quebrando os valores de cbk por transaÃ§Ãµes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "outputId": "66be7782-c0e9-4f9d-e2ad-44d04d186c53",
        "id": "ZQbytNW5LCfL"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num_fraudes     0   1   2   3   4   5   6   7   8   9   10  11  13  14  15  \\\n",
              "row_0                                                                        \n",
              "n_recorrente  1206  36   0   0   0   0   0   0   0   0   0   0   0   0   0   \n",
              "recorente      432  16  19  13   8   6   5   3   2   2   1   2   1   1   1   \n",
              "\n",
              "num_fraudes   19  22  \n",
              "row_0                 \n",
              "n_recorrente   0   0  \n",
              "recorente      1   1  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-fcb31e6a-a19f-405b-bab7-33aeef4780f7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>num_fraudes</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>10</th>\n",
              "      <th>11</th>\n",
              "      <th>13</th>\n",
              "      <th>14</th>\n",
              "      <th>15</th>\n",
              "      <th>19</th>\n",
              "      <th>22</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row_0</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>n_recorrente</th>\n",
              "      <td>1206</td>\n",
              "      <td>36</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>recorente</th>\n",
              "      <td>432</td>\n",
              "      <td>16</td>\n",
              "      <td>19</td>\n",
              "      <td>13</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fcb31e6a-a19f-405b-bab7-33aeef4780f7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-91f9601f-83f5-4408-83d0-7fe24e4c9d51\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91f9601f-83f5-4408-83d0-7fe24e4c9d51')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-91f9601f-83f5-4408-83d0-7fe24e4c9d51 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fcb31e6a-a19f-405b-bab7-33aeef4780f7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fcb31e6a-a19f-405b-bab7-33aeef4780f7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "36/df['has_cbk'].sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2z2M1Y_ULlSs",
        "outputId": "b13f0807-1e1f-4503-801b-671baff6353a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.09207161125319693"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "apenas 36 fraudes (9%) aconteceram na primeira compra no estabelecimento, em todos os outros casos, as trasnaÃ§Ãµes sÃ£o recorrentes, reforÃ§ando a ideia de viez e de plÃ¡sticos comprometidos;**POR NO PPT**"
      ],
      "metadata": {
        "id": "wZFqxWkzMEAL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(data=df_merchant_id,x='num_transacoes',y='num_fraudes',hue='avg_valor_transacoes')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "outputId": "4c5058ff-fe91-4a1a-826b-22766ff9a08d",
        "id": "0ZhU6qPNLCfL"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='num_transacoes', ylabel='num_fraudes'>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ReforÃ§ando a ideia. **Por no ppt**"
      ],
      "metadata": {
        "id": "W44dlh6vx1Fj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Construindo score\n",
        "\n",
        "Como a base Ã© muito pequena, usarei como teste os registros de dezembro e novembro. JÃ¡  para treinar o modelo, vou usar a de dezembro assim a base teste tambÃ©m serÃ¡ OOT(fora do tempo). Colocarei os perfis (usuÃ¡rios e estabelecimentos ) como variÃ¡veis."
      ],
      "metadata": {
        "id": "E7lr0iMxN_K0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_treino = df.loc[df['mes']=='201911']\n",
        "df_teste = df.loc[df['mes']=='201912']\n",
        "\n"
      ],
      "metadata": {
        "id": "0C0hzKqpCTWy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_treino.shape,df_teste.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "13PSmfnnPHEW",
        "outputId": "5a793eb0-e1cc-4fba-94b6-889934f17096"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((3047, 11), (152, 11))"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature engine"
      ],
      "metadata": {
        "id": "chxB3aNqPZwS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_treino.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "lkoTehBBPKqA",
        "outputId": "3578e867-6ff8-4b78-9680-97f5b7ca62ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     merchant_id  user_id       card_number           transaction_date  \\\n",
              "152        72376    67650  482425******5125 2019-11-30 23:45:26.325742   \n",
              "153        74483    71589  406166******7566 2019-11-30 23:42:45.653491   \n",
              "154        48515     6332  498453******4530 2019-11-30 23:39:27.831683   \n",
              "155        58284    42806  548573******1790 2019-11-30 23:36:31.174418   \n",
              "156        18980    10563  230650******4500 2019-11-30 23:23:28.713391   \n",
              "\n",
              "     transaction_amount  device_id  has_cbk     mes  weekday  hourday  \\\n",
              "152              192.82   245189.0        0  201911        5       23   \n",
              "153              353.49   695963.0        0  201911        5       23   \n",
              "154              222.12   303107.0        0  201911        5       23   \n",
              "155              307.58   601936.0        0  201911        5       23   \n",
              "156              386.81   267551.0        0  201911        5       23   \n",
              "\n",
              "     minutesday  \n",
              "152          45  \n",
              "153          42  \n",
              "154          39  \n",
              "155          36  \n",
              "156          23  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-7cc01894-3c12-4bde-8b2a-642f4cb13087\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>user_id</th>\n",
              "      <th>card_number</th>\n",
              "      <th>transaction_date</th>\n",
              "      <th>transaction_amount</th>\n",
              "      <th>device_id</th>\n",
              "      <th>has_cbk</th>\n",
              "      <th>mes</th>\n",
              "      <th>weekday</th>\n",
              "      <th>hourday</th>\n",
              "      <th>minutesday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>152</th>\n",
              "      <td>72376</td>\n",
              "      <td>67650</td>\n",
              "      <td>482425******5125</td>\n",
              "      <td>2019-11-30 23:45:26.325742</td>\n",
              "      <td>192.82</td>\n",
              "      <td>245189.0</td>\n",
              "      <td>0</td>\n",
              "      <td>201911</td>\n",
              "      <td>5</td>\n",
              "      <td>23</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153</th>\n",
              "      <td>74483</td>\n",
              "      <td>71589</td>\n",
              "      <td>406166******7566</td>\n",
              "      <td>2019-11-30 23:42:45.653491</td>\n",
              "      <td>353.49</td>\n",
              "      <td>695963.0</td>\n",
              "      <td>0</td>\n",
              "      <td>201911</td>\n",
              "      <td>5</td>\n",
              "      <td>23</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154</th>\n",
              "      <td>48515</td>\n",
              "      <td>6332</td>\n",
              "      <td>498453******4530</td>\n",
              "      <td>2019-11-30 23:39:27.831683</td>\n",
              "      <td>222.12</td>\n",
              "      <td>303107.0</td>\n",
              "      <td>0</td>\n",
              "      <td>201911</td>\n",
              "      <td>5</td>\n",
              "      <td>23</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>155</th>\n",
              "      <td>58284</td>\n",
              "      <td>42806</td>\n",
              "      <td>548573******1790</td>\n",
              "      <td>2019-11-30 23:36:31.174418</td>\n",
              "      <td>307.58</td>\n",
              "      <td>601936.0</td>\n",
              "      <td>0</td>\n",
              "      <td>201911</td>\n",
              "      <td>5</td>\n",
              "      <td>23</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>156</th>\n",
              "      <td>18980</td>\n",
              "      <td>10563</td>\n",
              "      <td>230650******4500</td>\n",
              "      <td>2019-11-30 23:23:28.713391</td>\n",
              "      <td>386.81</td>\n",
              "      <td>267551.0</td>\n",
              "      <td>0</td>\n",
              "      <td>201911</td>\n",
              "      <td>5</td>\n",
              "      <td>23</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7cc01894-3c12-4bde-8b2a-642f4cb13087')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-5ff21846-6eb5-4157-9e73-3706ed0bbc00\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ff21846-6eb5-4157-9e73-3706ed0bbc00')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-5ff21846-6eb5-4157-9e73-3706ed0bbc00 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7cc01894-3c12-4bde-8b2a-642f4cb13087 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7cc01894-3c12-4bde-8b2a-642f4cb13087');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## criando perfis para treino\n",
        "\n",
        "def get_perfis_user_id(df):\n",
        "  df_user_id = df.value_counts('user_id',ascending=False).reset_index().rename(columns={0:'num_transacoes_user_id'})\n",
        "  df_user_id=df_user_id.merge(\n",
        "      df.groupby('user_id').agg( #amount total, mÃ©dia, mÃ¡x, mÃ­nimo, CBK\n",
        "          valor_transacoes_user_id=('transaction_amount','sum')\n",
        "          ,avg_valor_transacoes_user_id=('transaction_amount','mean')\n",
        "          ,max_valor_transacoes_user_id=('transaction_amount','max')\n",
        "          ,min_valor_transacoes_user_id=('transaction_amount','min')\n",
        "          ,num_fraudes_user_id=('has_cbk','sum')\n",
        "      ).reset_index(),\n",
        "      on='user_id',\n",
        "      how='left'\n",
        "  )\n",
        "  return df_user_id # df_userId Ã© o perfil do usuÃ¡rio\n",
        "def get_perfis_merchant_id(df):\n",
        "  df_merchant_id = df.value_counts('merchant_id',ascending=False).reset_index().rename(columns={0:'num_transacoes_merchant_id'})\n",
        "  df_merchant_id=df_merchant_id.merge(\n",
        "      df.groupby('merchant_id').agg(\n",
        "          valor_transacoes_merchant_id=('transaction_amount','sum')\n",
        "          ,avg_valor_transacoes_merchant_id=('transaction_amount','mean')\n",
        "          ,max_valor_transacoes_merchant_id=('transaction_amount','max')\n",
        "          ,min_valor_transacoes_merchant_id=('transaction_amount','min')\n",
        "          ,num_fraudes_merchant_id=('has_cbk','sum')\n",
        "      ).reset_index(),\n",
        "      on='merchant_id',\n",
        "      how='left'\n",
        "  )\n",
        "  return df_merchant_id # df_merchant_id  perfil do mid"
      ],
      "metadata": {
        "id": "awj48vsEPdup"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_treino = df_treino.merge(  #mergiando o user_id com o merchant_id pro treino\n",
        "    get_perfis_user_id(df_treino),\n",
        "    on='user_id',\n",
        "    how='left'\n",
        ").merge(\n",
        "    get_perfis_merchant_id(df_treino),\n",
        "    on='merchant_id',\n",
        "    how='left')\n",
        "\n",
        "df_teste = df_teste.merge( #mergiando o user_id com o merchant_id pro teste\n",
        "    get_perfis_user_id(df_teste),\n",
        "    on='user_id',\n",
        "    how='left'\n",
        ").merge(\n",
        "    get_perfis_merchant_id(df_teste),\n",
        "    on='merchant_id',\n",
        "    how='left')"
      ],
      "metadata": {
        "id": "GglGwKydP21W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_treino.isnull().sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lcBN7IEjQS2D",
        "outputId": "93983164-6ef5-41b5-e96c-a093bb18a11c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "merchant_id                           0\n",
              "user_id                               0\n",
              "card_number                           0\n",
              "transaction_date                      0\n",
              "transaction_amount                    0\n",
              "device_id                           804\n",
              "has_cbk                               0\n",
              "mes                                   0\n",
              "weekday                               0\n",
              "hourday                               0\n",
              "minutesday                            0\n",
              "num_transacoes_user_id                0\n",
              "valor_transacoes_user_id              0\n",
              "avg_valor_transacoes_user_id          0\n",
              "max_valor_transacoes_user_id          0\n",
              "min_valor_transacoes_user_id          0\n",
              "num_fraudes_user_id                   0\n",
              "num_transacoes_merchant_id            0\n",
              "valor_transacoes_merchant_id          0\n",
              "avg_valor_transacoes_merchant_id      0\n",
              "max_valor_transacoes_merchant_id      0\n",
              "min_valor_transacoes_merchant_id      0\n",
              "num_fraudes_merchant_id               0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_teste.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_9mpPuqiQZEW",
        "outputId": "c68f3ab1-a195-4a77-9c9b-d1baa96692f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "merchant_id                          0\n",
              "user_id                              0\n",
              "card_number                          0\n",
              "transaction_date                     0\n",
              "transaction_amount                   0\n",
              "device_id                           26\n",
              "has_cbk                              0\n",
              "mes                                  0\n",
              "weekday                              0\n",
              "hourday                              0\n",
              "minutesday                           0\n",
              "num_transacoes_user_id               0\n",
              "valor_transacoes_user_id             0\n",
              "avg_valor_transacoes_user_id         0\n",
              "max_valor_transacoes_user_id         0\n",
              "min_valor_transacoes_user_id         0\n",
              "num_fraudes_user_id                  0\n",
              "num_transacoes_merchant_id           0\n",
              "valor_transacoes_merchant_id         0\n",
              "avg_valor_transacoes_merchant_id     0\n",
              "max_valor_transacoes_merchant_id     0\n",
              "min_valor_transacoes_merchant_id     0\n",
              "num_fraudes_merchant_id              0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_teste.columns #demonstrar quais colunas ficaram dentro do perfil de teste"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ngi4ctmZR35L",
        "outputId": "e4c79c32-f9b2-4228-85e2-89484ab6b5e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['merchant_id', 'user_id', 'card_number', 'transaction_date',\n",
              "       'transaction_amount', 'device_id', 'has_cbk', 'mes', 'weekday',\n",
              "       'hourday', 'minutesday', 'num_transacoes_user_id',\n",
              "       'valor_transacoes_user_id', 'avg_valor_transacoes_user_id',\n",
              "       'max_valor_transacoes_user_id', 'min_valor_transacoes_user_id',\n",
              "       'num_fraudes_user_id', 'num_transacoes_merchant_id',\n",
              "       'valor_transacoes_merchant_id', 'avg_valor_transacoes_merchant_id',\n",
              "       'max_valor_transacoes_merchant_id', 'min_valor_transacoes_merchant_id',\n",
              "       'num_fraudes_merchant_id'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_treino.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q2tIe3sptJzf",
        "outputId": "85ff91e1-8f58-41a8-8b03-e69f87496019"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['merchant_id', 'user_id', 'card_number', 'transaction_date',\n",
              "       'transaction_amount', 'device_id', 'has_cbk', 'mes', 'weekday',\n",
              "       'hourday', 'minutesday', 'num_transacoes_user_id',\n",
              "       'valor_transacoes_user_id', 'avg_valor_transacoes_user_id',\n",
              "       'max_valor_transacoes_user_id', 'min_valor_transacoes_user_id',\n",
              "       'num_fraudes_user_id', 'num_transacoes_merchant_id',\n",
              "       'valor_transacoes_merchant_id', 'avg_valor_transacoes_merchant_id',\n",
              "       'max_valor_transacoes_merchant_id', 'min_valor_transacoes_merchant_id',\n",
              "       'num_fraudes_merchant_id'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Criando as features"
      ],
      "metadata": {
        "id": "TZoc7EYA2FIw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "features_modelo_1 =[ #modelo 1 Ã© sem os perfis\n",
        "       'transaction_amount', 'weekday',\n",
        "       'hourday', 'minutesday']\n",
        "\n",
        "features_modelo_2 =[ #modelo 2 Ã© com os perfis para a gente testar\n",
        "       'transaction_amount', 'weekday',\n",
        "       'hourday', 'minutesday', 'num_transacoes_user_id',\n",
        "       'valor_transacoes_user_id', 'avg_valor_transacoes_user_id',\n",
        "       'max_valor_transacoes_user_id', 'min_valor_transacoes_user_id',\n",
        "       'num_fraudes_user_id', 'num_transacoes_merchant_id',\n",
        "       'valor_transacoes_merchant_id', 'avg_valor_transacoes_merchant_id',\n",
        "       'max_valor_transacoes_merchant_id', 'min_valor_transacoes_merchant_id',\n",
        "       'num_fraudes_merchant_id']\n"
      ],
      "metadata": {
        "id": "-ui5ZgHYRnOF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Treinando modelo\n",
        "Dado o desbalanceamento de dados, o treinamento vou usar oversample devido a baixa qtd de registros de cbk  "
      ],
      "metadata": {
        "id": "wKgF9r5LSNl3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Testando as variÃ¡veis"
      ],
      "metadata": {
        "id": "xSV_lMKISnq0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def train_test_model(train, test, features,modelo,return_model=False):\n",
        "  x_train=train[features]\n",
        "  x_test=test[features]\n",
        "  y_train=train['has_cbk']\n",
        "  y_test=test['has_cbk']\n",
        "\n",
        "  # oversample\n",
        "  sm = SMOTE(random_state=42) #smote para evitar duplicidade\n",
        "  X_res, y_res = sm.fit_resample(x_train, y_train)\n",
        "  modelo.fit(X_res,y_res)\n",
        "  print('MÃ©tricas do treino')\n",
        "  print(classification_report(y_res,modelo.predict(X_res)))\n",
        "  print('-'*30)\n",
        "  print('MÃ©tricas do teste')\n",
        "  print(classification_report(y_test,modelo.predict(x_test)))\n",
        "\n",
        "\n",
        "  if return_model:\n",
        "    return modelo\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "XtfhtVG1SmO6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Avaliando a performance\n",
        "\n"
      ],
      "metadata": {
        "id": "WYX8VimNxoPr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# regressao logistica sem os perfis\n",
        "rl=LogisticRegression()\n",
        "train_test_model(df_treino,df_teste,features_modelo_1,modelo=rl )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nogXYQxIR8Bn",
        "outputId": "9c69b314-8ea4-4d5c-c54e-7ab513ddfbbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.63      0.78      0.70      2683\n",
            "           1       0.71      0.53      0.61      2683\n",
            "\n",
            "    accuracy                           0.66      5366\n",
            "   macro avg       0.67      0.66      0.65      5366\n",
            "weighted avg       0.67      0.66      0.65      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.93      0.89       125\n",
            "           1       0.47      0.30      0.36        27\n",
            "\n",
            "    accuracy                           0.82       152\n",
            "   macro avg       0.66      0.61      0.63       152\n",
            "weighted avg       0.79      0.82      0.80       152\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Levando em consideraÃ§Ã£o o F1-Score, precision e recall dÃ¡ para notar que\n",
        "a performance caiu um pouco no treino, mas despencou no teste. Problem!"
      ],
      "metadata": {
        "id": "eBx4gunVy0EM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# testar a regressao logistica com os perfis\n",
        "# mudanÃ§a nos parÃ¢metros\n",
        "rl=LogisticRegression()\n",
        "train_test_model(df_treino,df_teste,features_modelo_2,modelo=rl )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jA2Wi6A9UGNV",
        "outputId": "05ce7473-b663-445c-ed3f-c56f8cea3eb1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.91      0.86      2683\n",
            "           1       0.89      0.79      0.84      2683\n",
            "\n",
            "    accuracy                           0.85      5366\n",
            "   macro avg       0.85      0.85      0.85      5366\n",
            "weighted avg       0.85      0.85      0.85      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.93      0.92       125\n",
            "           1       0.65      0.63      0.64        27\n",
            "\n",
            "    accuracy                           0.88       152\n",
            "   macro avg       0.79      0.78      0.78       152\n",
            "weighted avg       0.87      0.88      0.87       152\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Performance no teste Ã© boa, mas tambÃ©m despencou no teste\n",
        "\n"
      ],
      "metadata": {
        "id": "7Efk7hdIzelz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# lgbm sem os perfis\n",
        "lgbm=lgb.LGBMClassifier()\n",
        "train_test_model(df_treino,df_teste,features_modelo_1,modelo=lgbm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RbhiObDjUbAW",
        "outputId": "dfa33366-9928-4ac1-e3d7-a1bdc3606740"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.94      0.87      0.91      2683\n",
            "           1       0.88      0.95      0.91      2683\n",
            "\n",
            "    accuracy                           0.91      5366\n",
            "   macro avg       0.91      0.91      0.91      5366\n",
            "weighted avg       0.91      0.91      0.91      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.99      0.90       125\n",
            "           1       0.00      0.00      0.00        27\n",
            "\n",
            "    accuracy                           0.82       152\n",
            "   macro avg       0.41      0.50      0.45       152\n",
            "weighted avg       0.68      0.82      0.74       152\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "O LGBM sem os perfis Ã© excelente no treino, porÃ©m horrÃ­vel no teste. Isso se deve ao fato da base estar enviezada.\n"
      ],
      "metadata": {
        "id": "5ndTXDOx1KfF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# lgbm com os perfis - MudanÃ§a nos ParÃ¢metros\n",
        "lgbm=lgb.LGBMClassifier()\n",
        "train_test_model(df_treino,df_teste,features_modelo_2,modelo=lgbm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J9IuPzeYUqCU",
        "outputId": "7106a917-e0ab-4497-f84d-b3bfc496f6e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00      2683\n",
            "           1       1.00      1.00      1.00      2683\n",
            "\n",
            "    accuracy                           1.00      5366\n",
            "   macro avg       1.00      1.00      1.00      5366\n",
            "weighted avg       1.00      1.00      1.00      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.98      0.99       125\n",
            "           1       0.93      1.00      0.96        27\n",
            "\n",
            "    accuracy                           0.99       152\n",
            "   macro avg       0.97      0.99      0.98       152\n",
            "weighted avg       0.99      0.99      0.99       152\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Os perfis influenciam muito o desempenho, porÃ©m eles estÃ£o enviesado devido ao histÃ³rico. Se for considerar os perfis, o melhor Ã© o lgbm (0.93,    1.00 ,     0.96 no teste), se nÃ£o for considerar, o melhor Ã© a RL. Vale ressaltar que a AcurÃ¡cia nÃ£o Ã© uma boa mÃ©trica para selecionar o melhor modelo neste caso, Ã© melhor usar a precision(hithat), recall(detecÃ§Ã£o) e f1-score\n",
        "Por isso que eu usei ele como base para fazer as anÃ¡lises anteriores !\n",
        "\n",
        "Vou seguir com o LGBM com perfis apenas para esse teste. Na vida real eu nÃ£o usaria isso porque uma performance boa demais Ã© no mÃ­nimo estranho"
      ],
      "metadata": {
        "id": "K_mUQiiaU6pG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lgbm=lgb.LGBMClassifier()\n",
        "model_final_lgbm = train_test_model(df_treino,df_teste,features_modelo_2,modelo=lgbm,return_model=True)"
      ],
      "metadata": {
        "id": "2mgAGp1RUxES",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7089577c-ed1f-4976-b918-b6d4395ec6cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00      2683\n",
            "           1       1.00      1.00      1.00      2683\n",
            "\n",
            "    accuracy                           1.00      5366\n",
            "   macro avg       1.00      1.00      1.00      5366\n",
            "weighted avg       1.00      1.00      1.00      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.98      0.99       125\n",
            "           1       0.93      1.00      0.96        27\n",
            "\n",
            "    accuracy                           0.99       152\n",
            "   macro avg       0.97      0.99      0.98       152\n",
            "weighted avg       0.99      0.99      0.99       152\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "-iCCJriUXdTL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#  Importancia das variaveis - aqui vale entender o que dÃ¡ para excluir depois\n",
        "lgb.plot_importance(model_final_lgbm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "SGkGkrCYXSIC",
        "outputId": "918b4548-77b6-488b-b168-cb1dc7460005"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Feature importance'}, xlabel='Feature importance', ylabel='Features'>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mais uma demonstraÃ§Ã£o de que o valor da transaÃ§Ã£o estÃ¡ muito ligado ao que Ã© fraude. Vaou aproveitar essa deixa e colocar uma trava de valor, simulando um contato com o cliente para validar se ele Ã© \" ele mesmo \" . Aqui vale a pena tentar descartar o \" minutesday \" e o \"hourday\"  em outro momento, porque como a base Ã© pequena e granular, nÃ£o dÃ¡ para se apegar 100% aos minutose horas,  dada a volatilidade da medida\n",
        "\n"
      ],
      "metadata": {
        "id": "hqPLFPSF0sa-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Regras\n",
        "Aqui vale lembrar que todo modelo de classificaÃ§Ã£o( seja ele binÃ¡rio ou nÃ£o) tem ferramentas prÃ³prias de escoragem e eu vou usar elas.\n"
      ],
      "metadata": {
        "id": "Cx1RQN0hXwLe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_treino['score']=model_final_lgbm.predict_proba(df_treino[model_final_lgbm.feature_name_])[:,1] #Aplicando ao treino\n",
        "df_teste['score']=model_final_lgbm.predict_proba(df_teste[model_final_lgbm.feature_name_])[:,1]# Aplicando ao teste"
      ],
      "metadata": {
        "id": "qiWMlQGcYJzc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dt=DecisionTreeClassifier(max_depth=4) #Ã¡rvore de decisÃ£o para fazer a decisÃ£o\n",
        "train_test_model(df_treino,df_teste,features_modelo_1+['score'],modelo=dt,return_model=False) #trazer o score da transaÃ§Ã£o\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JCsT-gWGXZih",
        "outputId": "fc623e87-6344-4273-92bb-aeb7fecada2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00      2683\n",
            "           1       1.00      1.00      1.00      2683\n",
            "\n",
            "    accuracy                           1.00      5366\n",
            "   macro avg       1.00      1.00      1.00      5366\n",
            "weighted avg       1.00      1.00      1.00      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.98      0.99       125\n",
            "           1       0.93      1.00      0.96        27\n",
            "\n",
            "    accuracy                           0.99       152\n",
            "   macro avg       0.97      0.99      0.98       152\n",
            "weighted avg       0.99      0.99      0.99       152\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt=DecisionTreeClassifier(max_depth=3) #3 graus de profundidade\n",
        "model_final_dt=train_test_model(df_treino,df_teste,features_modelo_1+['score'],modelo=dt,return_model=True)\n",
        "plot_tree(model_final_dt, feature_names=features_modelo_1+['score']) #plotar oo score para tirar uma mÃ©dia para um futuro corte\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 903
        },
        "id": "eIw7o8iQX8e_",
        "outputId": "4f57e231-6203-4615-bcef-2e183f45870d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00      2683\n",
            "           1       1.00      1.00      1.00      2683\n",
            "\n",
            "    accuracy                           1.00      5366\n",
            "   macro avg       1.00      1.00      1.00      5366\n",
            "weighted avg       1.00      1.00      1.00      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.98      0.99       125\n",
            "           1       0.93      1.00      0.96        27\n",
            "\n",
            "    accuracy                           0.99       152\n",
            "   macro avg       0.97      0.99      0.98       152\n",
            "weighted avg       0.99      0.99      0.99       152\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0.5, 0.75, 'score <= 0.519\\ngini = 0.5\\nsamples = 5366\\nvalue = [2683, 2683]'),\n",
              " Text(0.25, 0.25, 'gini = 0.0\\nsamples = 2683\\nvalue = [2683, 0]'),\n",
              " Text(0.75, 0.25, 'gini = 0.0\\nsamples = 2683\\nvalue = [0, 2683]')]"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt=DecisionTreeClassifier(max_depth=3) # plotar a Ã¡rvore\n",
        "model_final_dt=train_test_model(df_treino,df_teste,features_modelo_1,modelo=dt,return_model=True)\n",
        "plot_tree(model_final_dt, feature_names=features_modelo_1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "kDNs_nBgZOhp",
        "outputId": "7eabca2d-b305-473e-c9bf-aee38eaa4714"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÃ©tricas do treino\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.78      0.66      0.72      2683\n",
            "           1       0.71      0.82      0.76      2683\n",
            "\n",
            "    accuracy                           0.74      5366\n",
            "   macro avg       0.75      0.74      0.74      5366\n",
            "weighted avg       0.75      0.74      0.74      5366\n",
            "\n",
            "------------------------------\n",
            "MÃ©tricas do teste\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      1.00      0.91       125\n",
            "           1       1.00      0.04      0.07        27\n",
            "\n",
            "    accuracy                           0.83       152\n",
            "   macro avg       0.91      0.52      0.49       152\n",
            "weighted avg       0.86      0.83      0.76       152\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0.5, 0.875, 'transaction_amount <= 450.515\\ngini = 0.5\\nsamples = 5366\\nvalue = [2683, 2683]'),\n",
              " Text(0.25, 0.625, 'weekday <= 4.5\\ngini = 0.32\\nsamples = 1930\\nvalue = [1544, 386]'),\n",
              " Text(0.125, 0.375, 'weekday <= 1.5\\ngini = 0.379\\nsamples = 1352\\nvalue = [1009, 343]'),\n",
              " Text(0.0625, 0.125, 'gini = 0.079\\nsamples = 290\\nvalue = [278, 12]'),\n",
              " Text(0.1875, 0.125, 'gini = 0.429\\nsamples = 1062\\nvalue = [731, 331]'),\n",
              " Text(0.375, 0.375, 'hourday <= 20.5\\ngini = 0.138\\nsamples = 578\\nvalue = [535, 43]'),\n",
              " Text(0.3125, 0.125, 'gini = 0.091\\nsamples = 462\\nvalue = [440, 22]'),\n",
              " Text(0.4375, 0.125, 'gini = 0.297\\nsamples = 116\\nvalue = [95, 21]'),\n",
              " Text(0.75, 0.625, 'weekday <= 5.5\\ngini = 0.443\\nsamples = 3436\\nvalue = [1139, 2297]'),\n",
              " Text(0.625, 0.375, 'weekday <= 0.5\\ngini = 0.431\\nsamples = 3317\\nvalue = [1042, 2275]'),\n",
              " Text(0.5625, 0.125, 'gini = 0.479\\nsamples = 221\\nvalue = [133, 88]'),\n",
              " Text(0.6875, 0.125, 'gini = 0.415\\nsamples = 3096\\nvalue = [909, 2187]'),\n",
              " Text(0.875, 0.375, 'transaction_amount <= 3660.75\\ngini = 0.301\\nsamples = 119\\nvalue = [97, 22]'),\n",
              " Text(0.8125, 0.125, 'gini = 0.202\\nsamples = 105\\nvalue = [93, 12]'),\n",
              " Text(0.9375, 0.125, 'gini = 0.408\\nsamples = 14\\nvalue = [4, 10]')]"
            ]
          },
          "metadata": {},
          "execution_count": 68
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# alternativa para plotar\n",
        "import graphviz\n",
        "from sklearn import tree\n",
        "# DOT data\n",
        "dot_data = tree.export_graphviz(model_final_dt, out_file=None,\n",
        "                                feature_names=features_modelo_1,\n",
        "                                class_names=['n fraude','fraude'],\n",
        "                                filled=True)\n",
        "# plotar grÃ¡fico em png\n",
        "graph = graphviz.Source(dot_data, format=\"png\")\n",
        "graph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "8H4sd5EDZu5g",
        "outputId": "97b5fbdf-f48a-45d2-aabc-f8a269f56dfd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"1072pt\" height=\"433pt\"\n viewBox=\"0.00 0.00 1071.50 433.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 429)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-429 1067.5,-429 1067.5,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<polygon fill=\"#ffffff\" stroke=\"black\" points=\"630,-425 421,-425 421,-342 630,-342 630,-425\"/>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">transaction_amount &lt;= 450.515</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5366</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2683, 2683]</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<polygon fill=\"#eca06a\" stroke=\"black\" points=\"460.5,-306 328.5,-306 328.5,-223 460.5,-223 460.5,-306\"/>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">weekday &lt;= 4.5</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.32</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1930</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1544, 386]</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M480.05,-341.91C469.58,-332.56 458.36,-322.54 447.6,-312.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"449.66,-310.07 439.87,-306.02 445,-315.29 449.66,-310.07\"/>\n<text text-anchor=\"middle\" x=\"441.28\" y=\"-327.28\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<polygon fill=\"#9bcef2\" stroke=\"black\" points=\"717.5,-306 577.5,-306 577.5,-223 717.5,-223 717.5,-306\"/>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">weekday &lt;= 5.5</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.443</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3436</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1139, 2297]</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = fraude</text>\n</g>\n<!-- 0&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>0&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M567.83,-341.91C577.48,-332.65 587.82,-322.73 597.75,-313.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"600.45,-315.47 605.25,-306.02 595.61,-310.42 600.45,-315.47\"/>\n<text text-anchor=\"middle\" x=\"604.72\" y=\"-327.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<polygon fill=\"#eeac7c\" stroke=\"black\" points=\"263.5,-187 131.5,-187 131.5,-104 263.5,-104 263.5,-187\"/>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">weekday &lt;= 1.5</text>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.379</text>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1352</text>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1009, 343]</text>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M328.35,-224.22C310.49,-213.6 291.02,-202.04 272.7,-191.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"274.19,-187.98 263.81,-185.88 270.62,-194 274.19,-187.98\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<polygon fill=\"#e78b49\" stroke=\"black\" points=\"453,-187 336,-187 336,-104 453,-104 453,-187\"/>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">hourday &lt;= 20.5</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.138</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 578</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [535, 43]</text>\n<text text-anchor=\"middle\" x=\"394.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 1&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>1&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M394.5,-222.91C394.5,-214.65 394.5,-205.86 394.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"398,-197.02 394.5,-187.02 391,-197.02 398,-197.02\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<polygon fill=\"#e68642\" stroke=\"black\" points=\"117,-68 0,-68 0,0 117,0 117,-68\"/>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.079</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 290</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [278, 12]</text>\n<text text-anchor=\"middle\" x=\"58.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M145.74,-103.73C133.7,-94.24 120.9,-84.16 108.92,-74.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"110.79,-71.74 100.77,-68.3 106.46,-77.24 110.79,-71.74\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<polygon fill=\"#f1ba93\" stroke=\"black\" points=\"260,-68 135,-68 135,0 260,0 260,-68\"/>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.429</text>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1062</text>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [731, 331]</text>\n<text text-anchor=\"middle\" x=\"197.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 2&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>2&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M197.5,-103.73C197.5,-95.52 197.5,-86.86 197.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"201,-78.3 197.5,-68.3 194,-78.3 201,-78.3\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<polygon fill=\"#e68743\" stroke=\"black\" points=\"395,-68 278,-68 278,0 395,0 395,-68\"/>\n<text text-anchor=\"middle\" x=\"336.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.091</text>\n<text text-anchor=\"middle\" x=\"336.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 462</text>\n<text text-anchor=\"middle\" x=\"336.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [440, 22]</text>\n<text text-anchor=\"middle\" x=\"336.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 5&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>5&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M372.9,-103.73C368.31,-95.06 363.46,-85.9 358.84,-77.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"361.91,-75.5 354.14,-68.3 355.73,-78.77 361.91,-75.5\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<polygon fill=\"#eb9d65\" stroke=\"black\" points=\"526,-68 413,-68 413,0 526,0 526,-68\"/>\n<text text-anchor=\"middle\" x=\"469.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.297</text>\n<text text-anchor=\"middle\" x=\"469.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 116</text>\n<text text-anchor=\"middle\" x=\"469.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [95, 21]</text>\n<text text-anchor=\"middle\" x=\"469.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 5&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>5&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M422.43,-103.73C428.49,-94.88 434.9,-85.51 440.99,-76.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"443.93,-78.53 446.69,-68.3 438.15,-74.57 443.93,-78.53\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<polygon fill=\"#94caf1\" stroke=\"black\" points=\"717.5,-187 577.5,-187 577.5,-104 717.5,-104 717.5,-187\"/>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">weekday &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.431</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3317</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1042, 2275]</text>\n<text text-anchor=\"middle\" x=\"647.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = fraude</text>\n</g>\n<!-- 8&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>8&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M647.5,-222.91C647.5,-214.65 647.5,-205.86 647.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"651,-197.02 647.5,-187.02 644,-197.02 651,-197.02\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<polygon fill=\"#eb9e66\" stroke=\"black\" points=\"991,-187 782,-187 782,-104 991,-104 991,-187\"/>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">transaction_amount &lt;= 3660.75</text>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.301</text>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 119</text>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [97, 22]</text>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 8&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>8&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M717.59,-229.19C741.64,-217.42 768.92,-204.06 794.44,-191.57\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"796.31,-194.55 803.75,-187.01 793.23,-188.26 796.31,-194.55\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<polygon fill=\"#f6d4bc\" stroke=\"black\" points=\"661,-68 544,-68 544,0 661,0 661,-68\"/>\n<text text-anchor=\"middle\" x=\"602.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.479</text>\n<text text-anchor=\"middle\" x=\"602.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 221</text>\n<text text-anchor=\"middle\" x=\"602.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [133, 88]</text>\n<text text-anchor=\"middle\" x=\"602.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 9&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>9&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M630.74,-103.73C627.26,-95.24 623.57,-86.28 620.06,-77.73\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"623.22,-76.22 616.18,-68.3 616.75,-78.88 623.22,-76.22\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<polygon fill=\"#8bc6f0\" stroke=\"black\" points=\"811.5,-68 679.5,-68 679.5,0 811.5,0 811.5,-68\"/>\n<text text-anchor=\"middle\" x=\"745.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.415</text>\n<text text-anchor=\"middle\" x=\"745.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3096</text>\n<text text-anchor=\"middle\" x=\"745.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [909, 2187]</text>\n<text text-anchor=\"middle\" x=\"745.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = fraude</text>\n</g>\n<!-- 9&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>9&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M683.99,-103.73C692.15,-94.61 700.81,-84.93 708.98,-75.81\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"711.64,-78.09 715.7,-68.3 706.42,-73.42 711.64,-78.09\"/>\n</g>\n<!-- 13 -->\n<g id=\"node14\" class=\"node\">\n<title>13</title>\n<polygon fill=\"#e89153\" stroke=\"black\" points=\"943,-68 830,-68 830,0 943,0 943,-68\"/>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.202</text>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 105</text>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [93, 12]</text>\n<text text-anchor=\"middle\" x=\"886.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = n fraude</text>\n</g>\n<!-- 12&#45;&gt;13 -->\n<g id=\"edge13\" class=\"edge\">\n<title>12&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"black\" d=\"M886.5,-103.73C886.5,-95.52 886.5,-86.86 886.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"890,-78.3 886.5,-68.3 883,-78.3 890,-78.3\"/>\n</g>\n<!-- 14 -->\n<g id=\"node15\" class=\"node\">\n<title>14</title>\n<polygon fill=\"#88c4ef\" stroke=\"black\" points=\"1063.5,-68 961.5,-68 961.5,0 1063.5,0 1063.5,-68\"/>\n<text text-anchor=\"middle\" x=\"1012.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.408</text>\n<text text-anchor=\"middle\" x=\"1012.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n<text text-anchor=\"middle\" x=\"1012.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4, 10]</text>\n<text text-anchor=\"middle\" x=\"1012.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = fraude</text>\n</g>\n<!-- 12&#45;&gt;14 -->\n<g id=\"edge14\" class=\"edge\">\n<title>12&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"black\" d=\"M933.42,-103.73C944.23,-94.33 955.71,-84.35 966.49,-74.99\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"968.93,-77.5 974.18,-68.3 964.34,-72.22 968.93,-77.5\"/>\n</g>\n</g>\n</svg>\n",
            "text/plain": [
              "<graphviz.sources.Source at 0x7953f422b790>"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Ferramenta final"
      ],
      "metadata": {
        "id": "KihkuMhhagFp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_perfil_user=get_perfis_user_id(df)\n",
        "df_merchant=get_perfis_merchant_id(df_treino)"
      ],
      "metadata": {
        "id": "mEQyrDIRapYn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "perfils_user = df_perfil_user.set_index('user_id').to_dict(orient='index')\n",
        "perfils_merchant = df_merchant.set_index('merchant_id').to_dict(orient='index')"
      ],
      "metadata": {
        "id": "Jlsa0FprbGc4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_final_lgbm.feature_name_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eyHF1-m2cZ5Y",
        "outputId": "010d7885-6022-477d-9bf7-c9b20369c889"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['transaction_amount',\n",
              " 'weekday',\n",
              " 'hourday',\n",
              " 'minutesday',\n",
              " 'num_transacoes_user_id',\n",
              " 'valor_transacoes_user_id',\n",
              " 'avg_valor_transacoes_user_id',\n",
              " 'max_valor_transacoes_user_id',\n",
              " 'min_valor_transacoes_user_id',\n",
              " 'num_fraudes_user_id',\n",
              " 'num_transacoes_merchant_id',\n",
              " 'valor_transacoes_merchant_id',\n",
              " 'avg_valor_transacoes_merchant_id',\n",
              " 'max_valor_transacoes_merchant_id',\n",
              " 'min_valor_transacoes_merchant_id',\n",
              " 'num_fraudes_merchant_id']"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao={ #fechando o teste !\n",
        "\"transaction_id\" : 2342357,\n",
        "\"merchant_id\" : 29744,\n",
        "\"user_id\" : 97051,\n",
        "\"card_number\" : \"434505******9116\",\n",
        "\"transaction_date\" : \"2019-11-30T23:16:32.812632\",\n",
        "\"transaction_amount\" : 373,\n",
        "\"device_id\" : 285475\n",
        "}"
      ],
      "metadata": {
        "id": "SRsusrhzcnHO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "{\n",
        "\"transaction_id\" : 2342357,\n",
        "\"recommendation\" : \"approve\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RLk2Uoxecvtk",
        "outputId": "b3254308-2dd0-4299-abf0-e0a2043997d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 2342357, 'recommendation': 'approve'}"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ECAnxyAkduOz",
        "outputId": "716d6509-21e3-404d-d4ce-7f8f3def78fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 2342357,\n",
              " 'merchant_id': 29744,\n",
              " 'user_id': 97051,\n",
              " 'card_number': '434505******9116',\n",
              " 'transaction_date': '2019-11-30T23:16:32.812632',\n",
              " 'transaction_amount': 373,\n",
              " 'device_id': 285475}"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "user = requisicao['user_id']\n",
        "merchant = requisicao['merchant_id']"
      ],
      "metadata": {
        "id": "l1DhK8Gh3oqS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao.update(perfils_user[user])"
      ],
      "metadata": {
        "id": "mtf1k5Vl7q5J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao.update(perfils_merchant[mercharn])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        },
        "id": "_MqYMTgN7sfF",
        "outputId": "44295b87-ce35-414c-fd86-f02575a2145c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-79-fe2107df0954>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrequisicao\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperfils_merchant\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmercharn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'mercharn' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-pbhBVe97uzF",
        "outputId": "4b0b3897-79b2-4ddf-859f-5fecc5e7b17e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 2342357,\n",
              " 'merchant_id': 29744,\n",
              " 'user_id': 97051,\n",
              " 'card_number': '434505******9116',\n",
              " 'transaction_date': '2019-11-30T23:16:32.812632',\n",
              " 'transaction_amount': 373,\n",
              " 'device_id': 285475,\n",
              " 'num_transacoes_user_id': 1,\n",
              " 'valor_transacoes_user_id': 374.56,\n",
              " 'avg_valor_transacoes_user_id': 374.56,\n",
              " 'max_valor_transacoes_user_id': 374.56,\n",
              " 'min_valor_transacoes_user_id': 374.56,\n",
              " 'num_fraudes_user_id': 0}"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_requisicao=pd.DataFrame(requisicao,index=[0])\n",
        "df_requisicao"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 162
        },
        "id": "XsPcan-T7yK4",
        "outputId": "ab6267f6-699b-4f11-856b-6674c516ab93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   transaction_id  merchant_id  user_id       card_number  \\\n",
              "0         2342357        29744    97051  434505******9116   \n",
              "\n",
              "             transaction_date  transaction_amount  device_id  \\\n",
              "0  2019-11-30T23:16:32.812632                 373     285475   \n",
              "\n",
              "   num_transacoes_user_id  valor_transacoes_user_id  \\\n",
              "0                       1                    374.56   \n",
              "\n",
              "   avg_valor_transacoes_user_id  max_valor_transacoes_user_id  \\\n",
              "0                        374.56                        374.56   \n",
              "\n",
              "   min_valor_transacoes_user_id  num_fraudes_user_id  \n",
              "0                        374.56                    0  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-87bf4108-5860-4c00-bce0-bfa9c6d09f06\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>transaction_id</th>\n",
              "      <th>merchant_id</th>\n",
              "      <th>user_id</th>\n",
              "      <th>card_number</th>\n",
              "      <th>transaction_date</th>\n",
              "      <th>transaction_amount</th>\n",
              "      <th>device_id</th>\n",
              "      <th>num_transacoes_user_id</th>\n",
              "      <th>valor_transacoes_user_id</th>\n",
              "      <th>avg_valor_transacoes_user_id</th>\n",
              "      <th>max_valor_transacoes_user_id</th>\n",
              "      <th>min_valor_transacoes_user_id</th>\n",
              "      <th>num_fraudes_user_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2342357</td>\n",
              "      <td>29744</td>\n",
              "      <td>97051</td>\n",
              "      <td>434505******9116</td>\n",
              "      <td>2019-11-30T23:16:32.812632</td>\n",
              "      <td>373</td>\n",
              "      <td>285475</td>\n",
              "      <td>1</td>\n",
              "      <td>374.56</td>\n",
              "      <td>374.56</td>\n",
              "      <td>374.56</td>\n",
              "      <td>374.56</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87bf4108-5860-4c00-bce0-bfa9c6d09f06')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-d28801f9-40cc-47b6-b58f-fd8afc2e580e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d28801f9-40cc-47b6-b58f-fd8afc2e580e')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-d28801f9-40cc-47b6-b58f-fd8afc2e580e button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-87bf4108-5860-4c00-bce0-bfa9c6d09f06 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-87bf4108-5860-4c00-bce0-bfa9c6d09f06');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_HFyykHu73Mm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_requisicao['transaction_date']=pd.to_datetime(df_requisicao['transaction_date']) # atualizar a requisicao\n",
        "df_requisicao['weekday']=df_requisicao['transaction_date'].dt.weekday\n",
        "df_requisicao['hourday']=df_requisicao['transaction_date'].dt.hour\n",
        "df_requisicao['minutesday']=df_requisicao['transaction_date'].dt.minute"
      ],
      "metadata": {
        "id": "AGQje2Bp74iL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ferramenta\n",
        "\n",
        "class AntiFraudeSystem:\n",
        "  def __init__(self,perfils_user,perfils_merchant,modelo,corte=0.5):\n",
        "    self.perfil_user = perfils_user\n",
        "    self.perfil_merchant = perfils_merchant\n",
        "    self.modelo = modelo\n",
        "    self.corte = corte\n",
        "\n",
        "  def get_isFraude(self,requisicao):\n",
        "    transacao_id = requisicao['transaction_id']\n",
        "    df_requisicao = self._get_df_requisicao(requisicao)\n",
        "    self.score = self.modelo.predict_proba(df_requisicao[self.modelo.feature_name_])[:,1][0]\n",
        "    self.df_requisicao = df_requisicao\n",
        "    #  regra ------------------\n",
        "    recomendacao = self._regras()\n",
        "\n",
        "    #---------------------------------------------------\n",
        "    response = {}\n",
        "    response[\"transaction_id\"]=transacao_id\n",
        "    response[\"recommendation\"]=recomendacao\n",
        "\n",
        "    return response\n",
        "\n",
        "  def _regras(self):\n",
        "    self.numero_transacoes=self.df_requisicao['num_transacoes_merchant_id'].values[0]\n",
        "    self.valor_transacoes_user_id=df_requisicao['valor_transacoes_user_id'].values[0]\n",
        "    #recomendacao = 'aprovee' if self.score<self.corte and self.numero_transacoes<2 else 'reject'\n",
        "    regra1=self.score<self.corte #Corte de score\n",
        "    regra2=self.numero_transacoes<3 # Corte de 3 transaÃ§Ãµes porque praticamente todo mundo que tem muita transaÃ§Ã£o Ã© fraudador\n",
        "    regra3=self.valor_transacoes_user_id>2000 #corte de R$ 2000,00 no valor tambÃ©m !\n",
        "\n",
        "    if regra1 and regra2 and regra3:\n",
        "      recomendacao='aprove'\n",
        "    else:\n",
        "      recomendacao='reject'\n",
        "\n",
        "\n",
        "\n",
        "    return recomendacao\n",
        "\n",
        "\n",
        "  def _get_df_requisicao(self,requisicao):\n",
        "    user = requisicao['user_id']\n",
        "    mercharn = requisicao['merchant_id']\n",
        "    requisicao.update(self.perfil_user[user])\n",
        "    requisicao.update(self.perfil_merchant[mercharn])\n",
        "    df_requisicao=pd.DataFrame(requisicao,index=[0])\n",
        "    df_requisicao['transaction_date']=pd.to_datetime(df_requisicao['transaction_date'])\n",
        "    df_requisicao['weekday']=df_requisicao['transaction_date'].dt.weekday\n",
        "    df_requisicao['hourday']=df_requisicao['transaction_date'].dt.hour\n",
        "    df_requisicao['minutesday']=df_requisicao['transaction_date'].dt.minute\n",
        "\n",
        "    return df_requisicao\n"
      ],
      "metadata": {
        "id": "v9UyPAOnahdP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TESTE 1"
      ],
      "metadata": {
        "id": "Ll3jIv6djYga"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao={\n",
        "\"transaction_id\" : 2342357,\n",
        "\"merchant_id\" : 29744,\n",
        "\"user_id\" : 97051,\n",
        "\"card_number\" : \"434505******9116\",\n",
        "\"transaction_date\" : \"2019-11-30T23:16:32.812632\",\n",
        "\"transaction_amount\" : 373,\n",
        "\"device_id\" : 285475\n",
        "}"
      ],
      "metadata": {
        "id": "IdjMC47PjuUv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GEXy_fD4TSsX",
        "outputId": "2c7e34e9-349b-4c3f-8d0e-0363da24508e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 2342357,\n",
              " 'merchant_id': 29744,\n",
              " 'user_id': 97051,\n",
              " 'card_number': '434505******9116',\n",
              " 'transaction_date': '2019-11-30T23:16:32.812632',\n",
              " 'transaction_amount': 373,\n",
              " 'device_id': 285475}"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# iniciando a ferramenta\n",
        "antifraude = AntiFraudeSystem(perfils_user,perfils_merchant,model_final_lgbm,corte=0.5)"
      ],
      "metadata": {
        "id": "dY2pblxRjW9a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.get_isFraude(requisicao)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oWNaz2Bbjq6N",
        "outputId": "c816fbd4-7479-417a-8a3b-f10db0254256"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 2342357, 'recommendation': 'reject'}"
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Trazer score da Ãºltima transaÃ§Ã£o\n",
        "antifraude.score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Bs9tGx9UCa5",
        "outputId": "067a58bb-76c4-4bff-dc98-a40f31f567e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.00013398657706013785"
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# TESTE 2"
      ],
      "metadata": {
        "id": "fuWHMVGg6OFE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao2={\n",
        "\"transaction_id\" : 2342357,\n",
        "\"merchant_id\" : 29744,\n",
        "\"user_id\" : 97051,\n",
        "\"card_number\" : \"434505******9116\",\n",
        "\"transaction_date\" : \"2019-11-30T23:16:32.812632\",\n",
        "\"transaction_amount\" : 370,\n",
        "\"device_id\" : 285475\n",
        "}"
      ],
      "metadata": {
        "id": "NtPvqs1ijyAy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.get_isFraude(requisicao2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vtDsZr8f6HYw",
        "outputId": "4314bba4-f846-47cf-f7ab-c9768e0dc34c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 2342357, 'recommendation': 'reject'}"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "paedE_bV6KKx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# TESTE 3"
      ],
      "metadata": {
        "id": "lDQeXFXJ6Qzh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "requisicao3={\n",
        "\"transaction_id\" : 2342357,\n",
        "\"merchant_id\" : 29744,\n",
        "\"user_id\" : 97051,\n",
        "\"card_number\" : \"434505******9116\",\n",
        "\"transaction_date\" : \"2019-11-30T23:16:32.812632\",\n",
        "\"transaction_amount\" : 370,\n",
        "\"device_id\" : 285475\n",
        "}"
      ],
      "metadata": {
        "id": "oRqXWBvM6Spn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.get_isFraude(requisicao3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WMgnPt0i6U9A",
        "outputId": "5d411633-b3d8-4b64-c505-ada7a250099d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 2342357, 'recommendation': 'reject'}"
            ]
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8-L7JV1fUOqI",
        "outputId": "eb5f8ab8-8ab7-43ae-e1a3-0d113b2e5a82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.00013398657706013785"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TESTE 4"
      ],
      "metadata": {
        "id": "FxBhHJFx9NEn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao4={\n",
        "\"transaction_id\" : 234235,\n",
        "\"merchant_id\" : 29744,\n",
        "\"user_id\" : 11750, # CBK prÃ©vio\n",
        "\"card_number\" : \"434505******9116\",\n",
        "\"transaction_date\" : \"2019-11-30T23:16:32.812632\",\n",
        "\"transaction_amount\" : 37045, #VALOR ato\n",
        "\"device_id\" : 285475\n",
        "}"
      ],
      "metadata": {
        "id": "qyRdu6mZ6X4q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.get_isFraude(requisicao4) #NNegar por CBK prÃ©vio - Score sobe muito"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jLT9NMjO6jfM",
        "outputId": "c26d1954-e86a-4e2c-fd2d-97c37b1ca68b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 234235, 'recommendation': 'reject'}"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OyekEFToUWZ7",
        "outputId": "fa09e6a0-3534-4fe1-db4a-4b8c72f4094b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9947557604190977"
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# TESTE 5"
      ],
      "metadata": {
        "id": "zwZFXOlW9Qp5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao5={\n",
        "    \"transaction_id\" : 234235,\n",
        "\"merchant_id\" : 29744,\n",
        "\"user_id\" : 97051,\n",
        "\"card_number\" : \"434505******9116\",\n",
        "\"transaction_date\" : \"2019-11-30T23:16:32.812632\",\n",
        "\"transaction_amount\" : 345,\n",
        "\"device_id\" : 285475\n",
        "}"
      ],
      "metadata": {
        "id": "KXOdD9i46ly0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao5 # CONFIRMANDO"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x9ft6iH98A1F",
        "outputId": "8f26a6cb-4ac2-4d85-b598-eba8950d4a2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 234235,\n",
              " 'merchant_id': 29744,\n",
              " 'user_id': 97051,\n",
              " 'card_number': '434505******9116',\n",
              " 'transaction_date': '2019-11-30T23:16:32.812632',\n",
              " 'transaction_amount': 345,\n",
              " 'device_id': 285475}"
            ]
          },
          "metadata": {},
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.get_isFraude(requisicao5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-dDIWRowUcny",
        "outputId": "0e677441-21fe-478d-bd35-dc0a04d3193d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 234235, 'recommendation': 'reject'}"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# TESTE 6"
      ],
      "metadata": {
        "id": "lmtxt_Be9X-M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "requisicao6= {'transaction_id': 234235,\n",
        " 'merchant_id': 29744,\n",
        " 'user_id': 97051,\n",
        " 'card_number': '434505******9116',\n",
        " 'transaction_date': '2019-11-30T23:16:32.812632',\n",
        " 'transaction_amount': 3745045, #revisar e aplicar um teto de valor;\n",
        " 'device_id': 285475}\n"
      ],
      "metadata": {
        "id": "MFWHaseO8M3p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "antifraude.get_isFraude(requisicao6) # Negar por valor de transaÃ§Ã£o muito alto"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gufogw_S8CIE",
        "outputId": "5eea5366-2c8b-446f-e27d-bac1a52d77c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'transaction_id': 234235, 'recommendation': 'reject'}"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mX1_l-kw8HI0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}